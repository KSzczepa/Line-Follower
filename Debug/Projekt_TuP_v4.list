
Projekt_TuP_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002f2c  08002f2c  00012f2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  20000024  08002f80  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000294  08002f80  00020294  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010dbf  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000029fd  00000000  00000000  00030e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006f6b  00000000  00000000  00033810  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ab0  00000000  00000000  0003a780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c78  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005a8b  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004169  00000000  00000000  00041933  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00045a9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002040  00000000  00000000  00045b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f14 	.word	0x08002f14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08002f14 	.word	0x08002f14

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_d2iz>:
 8000548:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800054c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000550:	d215      	bcs.n	800057e <__aeabi_d2iz+0x36>
 8000552:	d511      	bpl.n	8000578 <__aeabi_d2iz+0x30>
 8000554:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000558:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800055c:	d912      	bls.n	8000584 <__aeabi_d2iz+0x3c>
 800055e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000566:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	bf18      	it	ne
 8000574:	4240      	negne	r0, r0
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d105      	bne.n	8000590 <__aeabi_d2iz+0x48>
 8000584:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800058e:	4770      	bx	lr
 8000590:	f04f 0000 	mov.w	r0, #0
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <__aeabi_d2f>:
 8000598:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800059c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005a0:	bf24      	itt	cs
 80005a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005aa:	d90d      	bls.n	80005c8 <__aeabi_d2f+0x30>
 80005ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005c0:	bf08      	it	eq
 80005c2:	f020 0001 	biceq.w	r0, r0, #1
 80005c6:	4770      	bx	lr
 80005c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005cc:	d121      	bne.n	8000612 <__aeabi_d2f+0x7a>
 80005ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005d2:	bfbc      	itt	lt
 80005d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005d8:	4770      	bxlt	lr
 80005da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005e2:	f1c2 0218 	rsb	r2, r2, #24
 80005e6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ee:	fa20 f002 	lsr.w	r0, r0, r2
 80005f2:	bf18      	it	ne
 80005f4:	f040 0001 	orrne.w	r0, r0, #1
 80005f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000600:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000604:	ea40 000c 	orr.w	r0, r0, ip
 8000608:	fa23 f302 	lsr.w	r3, r3, r2
 800060c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000610:	e7cc      	b.n	80005ac <__aeabi_d2f+0x14>
 8000612:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000616:	d107      	bne.n	8000628 <__aeabi_d2f+0x90>
 8000618:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800061c:	bf1e      	ittt	ne
 800061e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000622:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000626:	4770      	bxne	lr
 8000628:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800062c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000630:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b97a 	b.w	8000944 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	468c      	mov	ip, r1
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	9e08      	ldr	r6, [sp, #32]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d151      	bne.n	800071c <__udivmoddi4+0xb4>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d96d      	bls.n	800075a <__udivmoddi4+0xf2>
 800067e:	fab2 fe82 	clz	lr, r2
 8000682:	f1be 0f00 	cmp.w	lr, #0
 8000686:	d00b      	beq.n	80006a0 <__udivmoddi4+0x38>
 8000688:	f1ce 0c20 	rsb	ip, lr, #32
 800068c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	fa02 f70e 	lsl.w	r7, r2, lr
 8000698:	ea4c 0c05 	orr.w	ip, ip, r5
 800069c:	fa00 f40e 	lsl.w	r4, r0, lr
 80006a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80006a4:	0c25      	lsrs	r5, r4, #16
 80006a6:	fbbc f8fa 	udiv	r8, ip, sl
 80006aa:	fa1f f987 	uxth.w	r9, r7
 80006ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80006b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006b6:	fb08 f309 	mul.w	r3, r8, r9
 80006ba:	42ab      	cmp	r3, r5
 80006bc:	d90a      	bls.n	80006d4 <__udivmoddi4+0x6c>
 80006be:	19ed      	adds	r5, r5, r7
 80006c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80006c4:	f080 8123 	bcs.w	800090e <__udivmoddi4+0x2a6>
 80006c8:	42ab      	cmp	r3, r5
 80006ca:	f240 8120 	bls.w	800090e <__udivmoddi4+0x2a6>
 80006ce:	f1a8 0802 	sub.w	r8, r8, #2
 80006d2:	443d      	add	r5, r7
 80006d4:	1aed      	subs	r5, r5, r3
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80006dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80006e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006e4:	fb00 f909 	mul.w	r9, r0, r9
 80006e8:	45a1      	cmp	r9, r4
 80006ea:	d909      	bls.n	8000700 <__udivmoddi4+0x98>
 80006ec:	19e4      	adds	r4, r4, r7
 80006ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f2:	f080 810a 	bcs.w	800090a <__udivmoddi4+0x2a2>
 80006f6:	45a1      	cmp	r9, r4
 80006f8:	f240 8107 	bls.w	800090a <__udivmoddi4+0x2a2>
 80006fc:	3802      	subs	r0, #2
 80006fe:	443c      	add	r4, r7
 8000700:	eba4 0409 	sub.w	r4, r4, r9
 8000704:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000708:	2100      	movs	r1, #0
 800070a:	2e00      	cmp	r6, #0
 800070c:	d061      	beq.n	80007d2 <__udivmoddi4+0x16a>
 800070e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000712:	2300      	movs	r3, #0
 8000714:	6034      	str	r4, [r6, #0]
 8000716:	6073      	str	r3, [r6, #4]
 8000718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071c:	428b      	cmp	r3, r1
 800071e:	d907      	bls.n	8000730 <__udivmoddi4+0xc8>
 8000720:	2e00      	cmp	r6, #0
 8000722:	d054      	beq.n	80007ce <__udivmoddi4+0x166>
 8000724:	2100      	movs	r1, #0
 8000726:	e886 0021 	stmia.w	r6, {r0, r5}
 800072a:	4608      	mov	r0, r1
 800072c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000730:	fab3 f183 	clz	r1, r3
 8000734:	2900      	cmp	r1, #0
 8000736:	f040 808e 	bne.w	8000856 <__udivmoddi4+0x1ee>
 800073a:	42ab      	cmp	r3, r5
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xdc>
 800073e:	4282      	cmp	r2, r0
 8000740:	f200 80fa 	bhi.w	8000938 <__udivmoddi4+0x2d0>
 8000744:	1a84      	subs	r4, r0, r2
 8000746:	eb65 0503 	sbc.w	r5, r5, r3
 800074a:	2001      	movs	r0, #1
 800074c:	46ac      	mov	ip, r5
 800074e:	2e00      	cmp	r6, #0
 8000750:	d03f      	beq.n	80007d2 <__udivmoddi4+0x16a>
 8000752:	e886 1010 	stmia.w	r6, {r4, ip}
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	b912      	cbnz	r2, 8000762 <__udivmoddi4+0xfa>
 800075c:	2701      	movs	r7, #1
 800075e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000762:	fab7 fe87 	clz	lr, r7
 8000766:	f1be 0f00 	cmp.w	lr, #0
 800076a:	d134      	bne.n	80007d6 <__udivmoddi4+0x16e>
 800076c:	1beb      	subs	r3, r5, r7
 800076e:	0c3a      	lsrs	r2, r7, #16
 8000770:	fa1f fc87 	uxth.w	ip, r7
 8000774:	2101      	movs	r1, #1
 8000776:	fbb3 f8f2 	udiv	r8, r3, r2
 800077a:	0c25      	lsrs	r5, r4, #16
 800077c:	fb02 3318 	mls	r3, r2, r8, r3
 8000780:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000784:	fb0c f308 	mul.w	r3, ip, r8
 8000788:	42ab      	cmp	r3, r5
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x134>
 800078c:	19ed      	adds	r5, r5, r7
 800078e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x132>
 8000794:	42ab      	cmp	r3, r5
 8000796:	f200 80d1 	bhi.w	800093c <__udivmoddi4+0x2d4>
 800079a:	4680      	mov	r8, r0
 800079c:	1aed      	subs	r5, r5, r3
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80007a4:	fb02 5510 	mls	r5, r2, r0, r5
 80007a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80007ac:	fb0c fc00 	mul.w	ip, ip, r0
 80007b0:	45a4      	cmp	ip, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x15c>
 80007b4:	19e4      	adds	r4, r4, r7
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x15a>
 80007bc:	45a4      	cmp	ip, r4
 80007be:	f200 80b8 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 040c 	sub.w	r4, r4, ip
 80007c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007cc:	e79d      	b.n	800070a <__udivmoddi4+0xa2>
 80007ce:	4631      	mov	r1, r6
 80007d0:	4630      	mov	r0, r6
 80007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d6:	f1ce 0420 	rsb	r4, lr, #32
 80007da:	fa05 f30e 	lsl.w	r3, r5, lr
 80007de:	fa07 f70e 	lsl.w	r7, r7, lr
 80007e2:	fa20 f804 	lsr.w	r8, r0, r4
 80007e6:	0c3a      	lsrs	r2, r7, #16
 80007e8:	fa25 f404 	lsr.w	r4, r5, r4
 80007ec:	ea48 0803 	orr.w	r8, r8, r3
 80007f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80007f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80007f8:	fb02 4411 	mls	r4, r2, r1, r4
 80007fc:	fa1f fc87 	uxth.w	ip, r7
 8000800:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000804:	fb01 f30c 	mul.w	r3, r1, ip
 8000808:	42ab      	cmp	r3, r5
 800080a:	fa00 f40e 	lsl.w	r4, r0, lr
 800080e:	d909      	bls.n	8000824 <__udivmoddi4+0x1bc>
 8000810:	19ed      	adds	r5, r5, r7
 8000812:	f101 30ff 	add.w	r0, r1, #4294967295
 8000816:	f080 808a 	bcs.w	800092e <__udivmoddi4+0x2c6>
 800081a:	42ab      	cmp	r3, r5
 800081c:	f240 8087 	bls.w	800092e <__udivmoddi4+0x2c6>
 8000820:	3902      	subs	r1, #2
 8000822:	443d      	add	r5, r7
 8000824:	1aeb      	subs	r3, r5, r3
 8000826:	fa1f f588 	uxth.w	r5, r8
 800082a:	fbb3 f0f2 	udiv	r0, r3, r2
 800082e:	fb02 3310 	mls	r3, r2, r0, r3
 8000832:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000836:	fb00 f30c 	mul.w	r3, r0, ip
 800083a:	42ab      	cmp	r3, r5
 800083c:	d907      	bls.n	800084e <__udivmoddi4+0x1e6>
 800083e:	19ed      	adds	r5, r5, r7
 8000840:	f100 38ff 	add.w	r8, r0, #4294967295
 8000844:	d26f      	bcs.n	8000926 <__udivmoddi4+0x2be>
 8000846:	42ab      	cmp	r3, r5
 8000848:	d96d      	bls.n	8000926 <__udivmoddi4+0x2be>
 800084a:	3802      	subs	r0, #2
 800084c:	443d      	add	r5, r7
 800084e:	1aeb      	subs	r3, r5, r3
 8000850:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000854:	e78f      	b.n	8000776 <__udivmoddi4+0x10e>
 8000856:	f1c1 0720 	rsb	r7, r1, #32
 800085a:	fa22 f807 	lsr.w	r8, r2, r7
 800085e:	408b      	lsls	r3, r1
 8000860:	fa05 f401 	lsl.w	r4, r5, r1
 8000864:	ea48 0303 	orr.w	r3, r8, r3
 8000868:	fa20 fe07 	lsr.w	lr, r0, r7
 800086c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000870:	40fd      	lsrs	r5, r7
 8000872:	ea4e 0e04 	orr.w	lr, lr, r4
 8000876:	fbb5 f9fc 	udiv	r9, r5, ip
 800087a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800087e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000882:	fa1f f883 	uxth.w	r8, r3
 8000886:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800088a:	fb09 f408 	mul.w	r4, r9, r8
 800088e:	42ac      	cmp	r4, r5
 8000890:	fa02 f201 	lsl.w	r2, r2, r1
 8000894:	fa00 fa01 	lsl.w	sl, r0, r1
 8000898:	d908      	bls.n	80008ac <__udivmoddi4+0x244>
 800089a:	18ed      	adds	r5, r5, r3
 800089c:	f109 30ff 	add.w	r0, r9, #4294967295
 80008a0:	d243      	bcs.n	800092a <__udivmoddi4+0x2c2>
 80008a2:	42ac      	cmp	r4, r5
 80008a4:	d941      	bls.n	800092a <__udivmoddi4+0x2c2>
 80008a6:	f1a9 0902 	sub.w	r9, r9, #2
 80008aa:	441d      	add	r5, r3
 80008ac:	1b2d      	subs	r5, r5, r4
 80008ae:	fa1f fe8e 	uxth.w	lr, lr
 80008b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80008b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80008ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80008be:	fb00 f808 	mul.w	r8, r0, r8
 80008c2:	45a0      	cmp	r8, r4
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x26e>
 80008c6:	18e4      	adds	r4, r4, r3
 80008c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80008cc:	d229      	bcs.n	8000922 <__udivmoddi4+0x2ba>
 80008ce:	45a0      	cmp	r8, r4
 80008d0:	d927      	bls.n	8000922 <__udivmoddi4+0x2ba>
 80008d2:	3802      	subs	r0, #2
 80008d4:	441c      	add	r4, r3
 80008d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008da:	eba4 0408 	sub.w	r4, r4, r8
 80008de:	fba0 8902 	umull	r8, r9, r0, r2
 80008e2:	454c      	cmp	r4, r9
 80008e4:	46c6      	mov	lr, r8
 80008e6:	464d      	mov	r5, r9
 80008e8:	d315      	bcc.n	8000916 <__udivmoddi4+0x2ae>
 80008ea:	d012      	beq.n	8000912 <__udivmoddi4+0x2aa>
 80008ec:	b156      	cbz	r6, 8000904 <__udivmoddi4+0x29c>
 80008ee:	ebba 030e 	subs.w	r3, sl, lr
 80008f2:	eb64 0405 	sbc.w	r4, r4, r5
 80008f6:	fa04 f707 	lsl.w	r7, r4, r7
 80008fa:	40cb      	lsrs	r3, r1
 80008fc:	431f      	orrs	r7, r3
 80008fe:	40cc      	lsrs	r4, r1
 8000900:	6037      	str	r7, [r6, #0]
 8000902:	6074      	str	r4, [r6, #4]
 8000904:	2100      	movs	r1, #0
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	4618      	mov	r0, r3
 800090c:	e6f8      	b.n	8000700 <__udivmoddi4+0x98>
 800090e:	4690      	mov	r8, r2
 8000910:	e6e0      	b.n	80006d4 <__udivmoddi4+0x6c>
 8000912:	45c2      	cmp	sl, r8
 8000914:	d2ea      	bcs.n	80008ec <__udivmoddi4+0x284>
 8000916:	ebb8 0e02 	subs.w	lr, r8, r2
 800091a:	eb69 0503 	sbc.w	r5, r9, r3
 800091e:	3801      	subs	r0, #1
 8000920:	e7e4      	b.n	80008ec <__udivmoddi4+0x284>
 8000922:	4628      	mov	r0, r5
 8000924:	e7d7      	b.n	80008d6 <__udivmoddi4+0x26e>
 8000926:	4640      	mov	r0, r8
 8000928:	e791      	b.n	800084e <__udivmoddi4+0x1e6>
 800092a:	4681      	mov	r9, r0
 800092c:	e7be      	b.n	80008ac <__udivmoddi4+0x244>
 800092e:	4601      	mov	r1, r0
 8000930:	e778      	b.n	8000824 <__udivmoddi4+0x1bc>
 8000932:	3802      	subs	r0, #2
 8000934:	443c      	add	r4, r7
 8000936:	e745      	b.n	80007c4 <__udivmoddi4+0x15c>
 8000938:	4608      	mov	r0, r1
 800093a:	e708      	b.n	800074e <__udivmoddi4+0xe6>
 800093c:	f1a8 0802 	sub.w	r8, r8, #2
 8000940:	443d      	add	r5, r7
 8000942:	e72b      	b.n	800079c <__udivmoddi4+0x134>

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_InitTick+0x3c>)
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_InitTick+0x40>)
{
 800094e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	7818      	ldrb	r0, [r3, #0]
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f0 	udiv	r3, r3, r0
 800095a:	6810      	ldr	r0, [r2, #0]
 800095c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000960:	f000 faa8 	bl	8000eb4 <HAL_SYSTICK_Config>
 8000964:	4604      	mov	r4, r0
 8000966:	b958      	cbnz	r0, 8000980 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000968:	2d0f      	cmp	r5, #15
 800096a:	d809      	bhi.n	8000980 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	4602      	mov	r2, r0
 800096e:	4629      	mov	r1, r5
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 fa5c 	bl	8000e30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_InitTick+0x44>)
 800097a:	4620      	mov	r0, r4
 800097c:	601d      	str	r5, [r3, #0]
 800097e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000980:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000982:	bd38      	pop	{r3, r4, r5, pc}
 8000984:	20000020 	.word	0x20000020
 8000988:	20000000 	.word	0x20000000
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_Init>:
{
 8000990:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x30>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800099a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009aa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 fa2d 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ffc8 	bl	8000948 <HAL_InitTick>
  HAL_MspInit();
 80009b8:	f001 fff4 	bl	80029a4 <HAL_MspInit>
}
 80009bc:	2000      	movs	r0, #0
 80009be:	bd08      	pop	{r3, pc}
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_IncTick+0x10>)
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_IncTick+0x14>)
 80009c8:	6811      	ldr	r1, [r2, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	440b      	add	r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000060 	.word	0x20000060
 80009d8:	20000000 	.word	0x20000000

080009dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009dc:	4b01      	ldr	r3, [pc, #4]	; (80009e4 <HAL_GetTick+0x8>)
 80009de:	6818      	ldr	r0, [r3, #0]
}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000060 	.word	0x20000060

080009e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ea:	4604      	mov	r4, r0
 80009ec:	2800      	cmp	r0, #0
 80009ee:	f000 809b 	beq.w	8000b28 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80009f2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80009f4:	b925      	cbnz	r5, 8000a00 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f6:	f001 fbb7 	bl	8002168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009fa:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009fc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a02:	06db      	lsls	r3, r3, #27
 8000a04:	f100 808e 	bmi.w	8000b24 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a0e:	f023 0302 	bic.w	r3, r3, #2
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <HAL_ADC_Init+0x144>)
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000a20:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	6861      	ldr	r1, [r4, #4]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000a2a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000a2c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000a3e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000a40:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000a42:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000a46:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000a4e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000a50:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a5e:	4934      	ldr	r1, [pc, #208]	; (8000b30 <HAL_ADC_Init+0x148>)
 8000a60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a62:	428a      	cmp	r2, r1
 8000a64:	d052      	beq.n	8000b0c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a66:	6899      	ldr	r1, [r3, #8]
 8000a68:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000a6c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000a6e:	6899      	ldr	r1, [r3, #8]
 8000a70:	430a      	orrs	r2, r1
 8000a72:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a74:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a82:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a84:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a86:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a88:	f022 0202 	bic.w	r2, r2, #2
 8000a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000a94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a96:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d03e      	beq.n	8000b1c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a9e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000aa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000aa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	3901      	subs	r1, #1
 8000ab4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ab8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000abc:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000abe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac6:	3901      	subs	r1, #1
 8000ac8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ace:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ad0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000ae0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ae2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ae4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000aec:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000aee:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000af0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000af4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000af6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000afa:	f023 0303 	bic.w	r3, r3, #3
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000b04:	2300      	movs	r3, #0
 8000b06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000b0a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b1a:	e7b2      	b.n	8000a82 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b22:	e7c9      	b.n	8000ab8 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7ed      	b.n	8000b04 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000b28:	2001      	movs	r0, #1
}
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
 8000b2c:	40012300 	.word	0x40012300
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <HAL_ADC_Start_DMA>:
{
 8000b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b36:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000b38:	2200      	movs	r2, #0
 8000b3a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000b3c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000b40:	2a01      	cmp	r2, #1
{
 8000b42:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000b44:	d065      	beq.n	8000c12 <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b46:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b4e:	68aa      	ldr	r2, [r5, #8]
 8000b50:	07d2      	lsls	r2, r2, #31
 8000b52:	d505      	bpl.n	8000b60 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b54:	68aa      	ldr	r2, [r5, #8]
 8000b56:	07d0      	lsls	r0, r2, #31
 8000b58:	d415      	bmi.n	8000b86 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000b5a:	2000      	movs	r0, #0
}
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000b60:	68aa      	ldr	r2, [r5, #8]
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b68:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <HAL_ADC_Start_DMA+0xe4>)
 8000b6a:	6810      	ldr	r0, [r2, #0]
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <HAL_ADC_Start_DMA+0xe8>)
 8000b6e:	fbb0 f0f2 	udiv	r0, r0, r2
 8000b72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000b76:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8000b78:	9a01      	ldr	r2, [sp, #4]
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d0ea      	beq.n	8000b54 <HAL_ADC_Start_DMA+0x20>
      counter--;
 8000b7e:	9a01      	ldr	r2, [sp, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	9201      	str	r2, [sp, #4]
 8000b84:	e7f8      	b.n	8000b78 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8000b86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000b88:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000b8c:	f020 0001 	bic.w	r0, r0, #1
 8000b90:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000b94:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b96:	686a      	ldr	r2, [r5, #4]
 8000b98:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b9a:	bf41      	itttt	mi
 8000b9c:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8000b9e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000ba2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000ba6:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ba8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000baa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bb0:	bf1c      	itt	ne
 8000bb2:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000bb4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_ADC_Start_DMA+0xec>)
 8000bc2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_ADC_Start_DMA+0xf0>)
 8000bc6:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_ADC_Start_DMA+0xf4>)
 8000bca:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bcc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000bd0:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000bd2:	686a      	ldr	r2, [r5, #4]
 8000bd4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000bd8:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000bda:	68aa      	ldr	r2, [r5, #8]
 8000bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000be0:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000be2:	460a      	mov	r2, r1
 8000be4:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000be8:	f000 fa0e 	bl	8001008 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_ADC_Start_DMA+0xf8>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f013 0f1f 	tst.w	r3, #31
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	d108      	bne.n	8000c0a <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000bf8:	6898      	ldr	r0, [r3, #8]
 8000bfa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000bfe:	d1ac      	bne.n	8000b5a <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	e7a8      	b.n	8000b5c <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_ADC_Start_DMA+0xfc>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d1a4      	bne.n	8000b5a <HAL_ADC_Start_DMA+0x26>
 8000c10:	e7f2      	b.n	8000bf8 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 8000c12:	2002      	movs	r0, #2
 8000c14:	e7a2      	b.n	8000b5c <HAL_ADC_Start_DMA+0x28>
 8000c16:	bf00      	nop
 8000c18:	20000020 	.word	0x20000020
 8000c1c:	000f4240 	.word	0x000f4240
 8000c20:	08000c5b 	.word	0x08000c5b
 8000c24:	08000c39 	.word	0x08000c39
 8000c28:	08000c45 	.word	0x08000c45
 8000c2c:	40012300 	.word	0x40012300
 8000c30:	40012000 	.word	0x40012000

08000c34 <HAL_ADC_ConvCpltCallback>:
 8000c34:	4770      	bx	lr

08000c36 <HAL_ADC_ConvHalfCpltCallback>:
 8000c36:	4770      	bx	lr

08000c38 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000c38:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000c3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000c3c:	f7ff fffb 	bl	8000c36 <HAL_ADC_ConvHalfCpltCallback>
 8000c40:	bd08      	pop	{r3, pc}

08000c42 <HAL_ADC_ErrorCallback>:
{
 8000c42:	4770      	bx	lr

08000c44 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c44:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000c46:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000c4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000c54:	f7ff fff5 	bl	8000c42 <HAL_ADC_ErrorCallback>
 8000c58:	bd08      	pop	{r3, pc}

08000c5a <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5e:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000c62:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000c66:	d123      	bne.n	8000cb0 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	6891      	ldr	r1, [r2, #8]
 8000c72:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000c76:	d117      	bne.n	8000ca8 <ADC_DMAConvCplt+0x4e>
 8000c78:	7e19      	ldrb	r1, [r3, #24]
 8000c7a:	b9a9      	cbnz	r1, 8000ca8 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000c7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c7e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000c82:	d002      	beq.n	8000c8a <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000c84:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000c86:	0548      	lsls	r0, r1, #21
 8000c88:	d40e      	bmi.n	8000ca8 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c8a:	6851      	ldr	r1, [r2, #4]
 8000c8c:	f021 0120 	bic.w	r1, r1, #32
 8000c90:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c98:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c9e:	bf5e      	ittt	pl
 8000ca0:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8000ca2:	f042 0201 	orrpl.w	r2, r2, #1
 8000ca6:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffc3 	bl	8000c34 <HAL_ADC_ConvCpltCallback>
 8000cae:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000cb0:	06d2      	lsls	r2, r2, #27
 8000cb2:	d503      	bpl.n	8000cbc <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffc4 	bl	8000c42 <HAL_ADC_ErrorCallback>
 8000cba:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	4718      	bx	r3
	...

08000cc8 <HAL_ADC_ConfigChannel>:
{
 8000cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000cce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d06e      	beq.n	8000db4 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cd6:	680d      	ldr	r5, [r1, #0]
 8000cd8:	6804      	ldr	r4, [r0, #0]
 8000cda:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000cdc:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cde:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000ce0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000ce4:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ce6:	d92a      	bls.n	8000d3e <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ce8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000cec:	68e7      	ldr	r7, [r4, #12]
 8000cee:	3b1e      	subs	r3, #30
 8000cf0:	f04f 0e07 	mov.w	lr, #7
 8000cf4:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cf8:	ea27 070e 	bic.w	r7, r7, lr
 8000cfc:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cfe:	68e7      	ldr	r7, [r4, #12]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	433b      	orrs	r3, r7
 8000d06:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000d08:	684a      	ldr	r2, [r1, #4]
 8000d0a:	2a06      	cmp	r2, #6
 8000d0c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000d10:	d825      	bhi.n	8000d5e <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d12:	4413      	add	r3, r2
 8000d14:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000d16:	1f59      	subs	r1, r3, #5
 8000d18:	231f      	movs	r3, #31
 8000d1a:	408b      	lsls	r3, r1
 8000d1c:	ea27 0303 	bic.w	r3, r7, r3
 8000d20:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d24:	fa06 f101 	lsl.w	r1, r6, r1
 8000d28:	4311      	orrs	r1, r2
 8000d2a:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <HAL_ADC_ConfigChannel+0x130>)
 8000d2e:	429c      	cmp	r4, r3
 8000d30:	d034      	beq.n	8000d9c <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000d32:	2300      	movs	r3, #0
 8000d34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000d38:	4618      	mov	r0, r3
}
 8000d3a:	b003      	add	sp, #12
 8000d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d3e:	6927      	ldr	r7, [r4, #16]
 8000d40:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000d44:	f04f 0e07 	mov.w	lr, #7
 8000d48:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d4c:	ea27 070e 	bic.w	r7, r7, lr
 8000d50:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d52:	6927      	ldr	r7, [r4, #16]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	433b      	orrs	r3, r7
 8000d5a:	6123      	str	r3, [r4, #16]
 8000d5c:	e7d4      	b.n	8000d08 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000d5e:	2a0c      	cmp	r2, #12
 8000d60:	d80e      	bhi.n	8000d80 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d62:	4413      	add	r3, r2
 8000d64:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d66:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	ea21 0303 	bic.w	r3, r1, r3
 8000d72:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d76:	fa06 f202 	lsl.w	r2, r6, r2
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	6322      	str	r2, [r4, #48]	; 0x30
 8000d7e:	e7d5      	b.n	8000d2c <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d80:	4413      	add	r3, r2
 8000d82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d84:	3b41      	subs	r3, #65	; 0x41
 8000d86:	221f      	movs	r2, #31
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	ea21 0202 	bic.w	r2, r1, r2
 8000d8e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d92:	fa06 f103 	lsl.w	r1, r6, r3
 8000d96:	4311      	orrs	r1, r2
 8000d98:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000d9a:	e7c7      	b.n	8000d2c <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d9c:	2d12      	cmp	r5, #18
 8000d9e:	d10b      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_ADC_ConfigChannel+0x134>)
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000da8:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	e7be      	b.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000db4:	2002      	movs	r0, #2
 8000db6:	e7c0      	b.n	8000d3a <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_ADC_ConfigChannel+0x138>)
 8000dba:	429d      	cmp	r5, r3
 8000dbc:	d001      	beq.n	8000dc2 <HAL_ADC_ConfigChannel+0xfa>
 8000dbe:	2d11      	cmp	r5, #17
 8000dc0:	d1b7      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_ADC_ConfigChannel+0x134>)
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000dca:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dd2:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_ADC_ConfigChannel+0x138>)
 8000dd6:	429d      	cmp	r5, r3
 8000dd8:	d1ab      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_ADC_ConfigChannel+0x13c>)
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_ADC_ConfigChannel+0x140>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000de4:	230a      	movs	r3, #10
 8000de6:	4353      	muls	r3, r2
        counter--;
 8000de8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000dea:	9b01      	ldr	r3, [sp, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0a0      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000df0:	9b01      	ldr	r3, [sp, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	e7f8      	b.n	8000de8 <HAL_ADC_ConfigChannel+0x120>
 8000df6:	bf00      	nop
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	40012300 	.word	0x40012300
 8000e00:	10000012 	.word	0x10000012
 8000e04:	20000020 	.word	0x20000020
 8000e08:	000f4240 	.word	0x000f4240

08000e0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	0200      	lsls	r0, r0, #8
 8000e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e28:	60d3      	str	r3, [r2, #12]
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b530      	push	{r4, r5, lr}
 8000e34:	68dc      	ldr	r4, [r3, #12]
 8000e36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	bf28      	it	cs
 8000e44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 0501 	mov.w	r5, #1
 8000e4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e54:	bf8c      	ite	hi
 8000e56:	3c03      	subhi	r4, #3
 8000e58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5e:	fa05 f404 	lsl.w	r4, r5, r4
 8000e62:	3c01      	subs	r4, #1
 8000e64:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	ea42 0201 	orr.w	r2, r2, r1
 8000e6c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	bfad      	iteet	ge
 8000e72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	f000 000f 	andlt.w	r0, r0, #15
 8000e7a:	4b06      	ldrlt	r3, [pc, #24]	; (8000e94 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	bfb5      	itete	lt
 8000e82:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e8c:	bd30      	pop	{r4, r5, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	e000ed14 	.word	0xe000ed14

08000e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	db08      	blt.n	8000eae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9c:	0942      	lsrs	r2, r0, #5
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f000 001f 	and.w	r0, r0, #31
 8000ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8000ea8:	4b01      	ldr	r3, [pc, #4]	; (8000eb0 <HAL_NVIC_EnableIRQ+0x18>)
 8000eaa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eba:	d20a      	bcs.n	8000ed2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	21f0      	movs	r1, #240	; 0xf0
 8000ec4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ee8:	f023 0303 	bic.w	r3, r3, #3
 8000eec:	2118      	movs	r1, #24
 8000eee:	3a10      	subs	r2, #16
 8000ef0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000ef6:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ef8:	bf88      	it	hi
 8000efa:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000efc:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000efe:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f00:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000f02:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	08002f2c 	.word	0x08002f2c

08000f0c <HAL_DMA_Init>:
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}
 8000f0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff fd64 	bl	80009dc <HAL_GetTick>
 8000f14:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000f16:	2c00      	cmp	r4, #0
 8000f18:	d071      	beq.n	8000ffe <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f20:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f30:	6821      	ldr	r1, [r4, #0]
 8000f32:	680b      	ldr	r3, [r1, #0]
 8000f34:	07d8      	lsls	r0, r3, #31
 8000f36:	d43c      	bmi.n	8000fb2 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000f38:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f3a:	4d32      	ldr	r5, [pc, #200]	; (8001004 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f40:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	68e2      	ldr	r2, [r4, #12]
 8000f48:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4a:	6922      	ldr	r2, [r4, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6962      	ldr	r2, [r4, #20]
 8000f50:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	69e2      	ldr	r2, [r4, #28]
 8000f54:	4303      	orrs	r3, r0
 8000f56:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f58:	6a22      	ldr	r2, [r4, #32]
 8000f5a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f5e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f60:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f64:	bf01      	itttt	eq
 8000f66:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000f68:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000f6a:	4335      	orreq	r5, r6
 8000f6c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000f6e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000f70:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f72:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f74:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000f78:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f7c:	d10b      	bne.n	8000f96 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000f7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000f82:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f84:	b13d      	cbz	r5, 8000f96 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f86:	b9f8      	cbnz	r0, 8000fc8 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000f88:	2a01      	cmp	r2, #1
 8000f8a:	d02d      	beq.n	8000fe8 <HAL_DMA_Init+0xdc>
 8000f8c:	d301      	bcc.n	8000f92 <HAL_DMA_Init+0x86>
 8000f8e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f90:	d101      	bne.n	8000f96 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f92:	01ea      	lsls	r2, r5, #7
 8000f94:	d42b      	bmi.n	8000fee <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000f96:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f7ff ffa1 	bl	8000ee0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fa0:	233f      	movs	r3, #63	; 0x3f
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000faa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000fac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000fb0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb2:	f7ff fd13 	bl	80009dc <HAL_GetTick>
 8000fb6:	1b40      	subs	r0, r0, r5
 8000fb8:	2805      	cmp	r0, #5
 8000fba:	d9b9      	bls.n	8000f30 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc0:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fc8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000fcc:	d113      	bne.n	8000ff6 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000fce:	2a03      	cmp	r2, #3
 8000fd0:	d8e1      	bhi.n	8000f96 <HAL_DMA_Init+0x8a>
 8000fd2:	a001      	add	r0, pc, #4	; (adr r0, 8000fd8 <HAL_DMA_Init+0xcc>)
 8000fd4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000fd8:	08000fef 	.word	0x08000fef
 8000fdc:	08000f93 	.word	0x08000f93
 8000fe0:	08000fef 	.word	0x08000fef
 8000fe4:	08000fe9 	.word	0x08000fe9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fe8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000fec:	d1d3      	bne.n	8000f96 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fee:	2340      	movs	r3, #64	; 0x40
 8000ff0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	e7e5      	b.n	8000fc2 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000ff6:	2a02      	cmp	r2, #2
 8000ff8:	d9f9      	bls.n	8000fee <HAL_DMA_Init+0xe2>
 8000ffa:	2a03      	cmp	r2, #3
 8000ffc:	e7c8      	b.n	8000f90 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
 8001000:	bd70      	pop	{r4, r5, r6, pc}
 8001002:	bf00      	nop
 8001004:	f010803f 	.word	0xf010803f

08001008 <HAL_DMA_Start_IT>:
{
 8001008:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800100a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800100e:	2c01      	cmp	r4, #1
 8001010:	d032      	beq.n	8001078 <HAL_DMA_Start_IT+0x70>
 8001012:	2401      	movs	r4, #1
 8001014:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001018:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800101e:	2c01      	cmp	r4, #1
 8001020:	f04f 0500 	mov.w	r5, #0
 8001024:	f04f 0402 	mov.w	r4, #2
 8001028:	d124      	bne.n	8001074 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800102a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800102e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001030:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001032:	6825      	ldr	r5, [r4, #0]
 8001034:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001038:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800103a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800103c:	6883      	ldr	r3, [r0, #8]
 800103e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001040:	bf0e      	itee	eq
 8001042:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001044:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001046:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001048:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800104a:	bf08      	it	eq
 800104c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104e:	233f      	movs	r3, #63	; 0x3f
 8001050:	4093      	lsls	r3, r2
 8001052:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	f043 0316 	orr.w	r3, r3, #22
 800105a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800105c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800105e:	b11b      	cbz	r3, 8001068 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001070:	2000      	movs	r0, #0
 8001072:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001074:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001078:	2002      	movs	r0, #2
}
 800107a:	bd70      	pop	{r4, r5, r6, pc}

0800107c <HAL_DMA_IRQHandler>:
{
 800107c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800107e:	2300      	movs	r3, #0
 8001080:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001082:	4b5a      	ldr	r3, [pc, #360]	; (80011ec <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001084:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001086:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001088:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800108a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800108c:	2208      	movs	r2, #8
 800108e:	409a      	lsls	r2, r3
 8001090:	4216      	tst	r6, r2
{
 8001092:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001094:	d00c      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001096:	6801      	ldr	r1, [r0, #0]
 8001098:	6808      	ldr	r0, [r1, #0]
 800109a:	0740      	lsls	r0, r0, #29
 800109c:	d508      	bpl.n	80010b0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800109e:	6808      	ldr	r0, [r1, #0]
 80010a0:	f020 0004 	bic.w	r0, r0, #4
 80010a4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010a6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010b0:	2201      	movs	r2, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	4216      	tst	r6, r2
 80010b6:	d008      	beq.n	80010ca <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010b8:	6821      	ldr	r1, [r4, #0]
 80010ba:	6949      	ldr	r1, [r1, #20]
 80010bc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010be:	bf41      	itttt	mi
 80010c0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010c2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80010c4:	f042 0202 	orrmi.w	r2, r2, #2
 80010c8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ca:	2204      	movs	r2, #4
 80010cc:	409a      	lsls	r2, r3
 80010ce:	4216      	tst	r6, r2
 80010d0:	d008      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010d2:	6821      	ldr	r1, [r4, #0]
 80010d4:	6809      	ldr	r1, [r1, #0]
 80010d6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010d8:	bf41      	itttt	mi
 80010da:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010dc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80010de:	f042 0204 	orrmi.w	r2, r2, #4
 80010e2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010e4:	2210      	movs	r2, #16
 80010e6:	409a      	lsls	r2, r3
 80010e8:	4216      	tst	r6, r2
 80010ea:	d010      	beq.n	800110e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	0709      	lsls	r1, r1, #28
 80010f2:	d50c      	bpl.n	800110e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010f4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	0350      	lsls	r0, r2, #13
 80010fa:	d535      	bpl.n	8001168 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0319      	lsls	r1, r3, #12
 8001100:	d401      	bmi.n	8001106 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001104:	e000      	b.n	8001108 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001106:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001108:	b10b      	cbz	r3, 800110e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800110a:	4620      	mov	r0, r4
 800110c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800110e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001110:	2220      	movs	r2, #32
 8001112:	408a      	lsls	r2, r1
 8001114:	4216      	tst	r6, r2
 8001116:	d038      	beq.n	800118a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	06c6      	lsls	r6, r0, #27
 800111e:	d534      	bpl.n	800118a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001120:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001122:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001126:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001128:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800112a:	d125      	bne.n	8001178 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800112c:	f022 0216 	bic.w	r2, r2, #22
 8001130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001138:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800113a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800113c:	b90a      	cbnz	r2, 8001142 <HAL_DMA_IRQHandler+0xc6>
 800113e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001140:	b11a      	cbz	r2, 800114a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f022 0208 	bic.w	r2, r2, #8
 8001148:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800114a:	233f      	movs	r3, #63	; 0x3f
 800114c:	408b      	lsls	r3, r1
 800114e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001150:	2300      	movs	r3, #0
 8001152:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001156:	2301      	movs	r3, #1
 8001158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800115c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800115e:	b10b      	cbz	r3, 8001164 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001160:	4620      	mov	r0, r4
 8001162:	4798      	blx	r3
}
 8001164:	b003      	add	sp, #12
 8001166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800116c:	bf5e      	ittt	pl
 800116e:	681a      	ldrpl	r2, [r3, #0]
 8001170:	f022 0208 	bicpl.w	r2, r2, #8
 8001174:	601a      	strpl	r2, [r3, #0]
 8001176:	e7c4      	b.n	8001102 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001178:	0350      	lsls	r0, r2, #13
 800117a:	d528      	bpl.n	80011ce <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0319      	lsls	r1, r3, #12
 8001180:	d432      	bmi.n	80011e8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001182:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001184:	b10b      	cbz	r3, 800118a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001186:	4620      	mov	r0, r4
 8001188:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800118a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0e9      	beq.n	8001164 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001190:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001192:	07da      	lsls	r2, r3, #31
 8001194:	d519      	bpl.n	80011ca <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001196:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001198:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800119a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011a6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80011aa:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80011ae:	9b01      	ldr	r3, [sp, #4]
 80011b0:	3301      	adds	r3, #1
 80011b2:	429f      	cmp	r7, r3
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	d302      	bcc.n	80011be <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	07db      	lsls	r3, r3, #31
 80011bc:	d4f7      	bmi.n	80011ae <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80011be:	2300      	movs	r3, #0
 80011c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80011ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80011cc:	e7c7      	b.n	800115e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80011d4:	d108      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011d6:	6819      	ldr	r1, [r3, #0]
 80011d8:	f021 0110 	bic.w	r1, r1, #16
 80011dc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80011de:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80011e0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80011e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80011e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011ea:	e7cb      	b.n	8001184 <HAL_DMA_IRQHandler+0x108>
 80011ec:	20000020 	.word	0x20000020

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001388 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001200:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001204:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8001208:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800120e:	42ac      	cmp	r4, r5
 8001210:	f040 80a6 	bne.w	8001360 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001214:	684c      	ldr	r4, [r1, #4]
 8001216:	f024 0c10 	bic.w	ip, r4, #16
 800121a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800121e:	2e01      	cmp	r6, #1
 8001220:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001224:	d812      	bhi.n	800124c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8001226:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	2603      	movs	r6, #3
 800122a:	fa06 f60e 	lsl.w	r6, r6, lr
 800122e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001232:	68ce      	ldr	r6, [r1, #12]
 8001234:	fa06 f60e 	lsl.w	r6, r6, lr
 8001238:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800123a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800123c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800123e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001242:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001246:	409e      	lsls	r6, r3
 8001248:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800124a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800124e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001250:	fa06 f60e 	lsl.w	r6, r6, lr
 8001254:	43f6      	mvns	r6, r6
 8001256:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125a:	688f      	ldr	r7, [r1, #8]
 800125c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001260:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001264:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001268:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126a:	d116      	bne.n	800129a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800126c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001270:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001274:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001278:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001280:	f04f 0c0f 	mov.w	ip, #15
 8001284:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001288:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	690f      	ldr	r7, [r1, #16]
 800128e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001292:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001296:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800129a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129e:	f004 0703 	and.w	r7, r4, #3
 80012a2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80012a6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80012aa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ac:	00e6      	lsls	r6, r4, #3
 80012ae:	d557      	bpl.n	8001360 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	f04f 0b00 	mov.w	fp, #0
 80012b4:	f8cd b00c 	str.w	fp, [sp, #12]
 80012b8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012bc:	4e31      	ldr	r6, [pc, #196]	; (8001384 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80012c2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80012c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80012ca:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80012ce:	9703      	str	r7, [sp, #12]
 80012d0:	9f03      	ldr	r7, [sp, #12]
 80012d2:	f023 0703 	bic.w	r7, r3, #3
 80012d6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012da:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012de:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012ea:	f04f 0e0f 	mov.w	lr, #15
 80012ee:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f8:	d039      	beq.n	800136e <HAL_GPIO_Init+0x17e>
 80012fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012fe:	42b0      	cmp	r0, r6
 8001300:	d037      	beq.n	8001372 <HAL_GPIO_Init+0x182>
 8001302:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001306:	42b0      	cmp	r0, r6
 8001308:	d035      	beq.n	8001376 <HAL_GPIO_Init+0x186>
 800130a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800130e:	42b0      	cmp	r0, r6
 8001310:	d033      	beq.n	800137a <HAL_GPIO_Init+0x18a>
 8001312:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001316:	42b0      	cmp	r0, r6
 8001318:	bf14      	ite	ne
 800131a:	2607      	movne	r6, #7
 800131c:	2604      	moveq	r6, #4
 800131e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001322:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001326:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001328:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800132a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001330:	bf0c      	ite	eq
 8001332:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001334:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001336:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001338:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800133e:	bf0c      	ite	eq
 8001340:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001342:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001344:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001348:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800134c:	bf0c      	ite	eq
 800134e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001350:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001352:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001356:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001358:	bf54      	ite	pl
 800135a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800135c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800135e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001360:	3301      	adds	r3, #1
 8001362:	2b10      	cmp	r3, #16
 8001364:	f47f af4f 	bne.w	8001206 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001368:	b005      	add	sp, #20
 800136a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136e:	465e      	mov	r6, fp
 8001370:	e7d5      	b.n	800131e <HAL_GPIO_Init+0x12e>
 8001372:	2601      	movs	r6, #1
 8001374:	e7d3      	b.n	800131e <HAL_GPIO_Init+0x12e>
 8001376:	2602      	movs	r6, #2
 8001378:	e7d1      	b.n	800131e <HAL_GPIO_Init+0x12e>
 800137a:	2603      	movs	r6, #3
 800137c:	e7cf      	b.n	800131e <HAL_GPIO_Init+0x12e>
 800137e:	bf00      	nop
 8001380:	40013c00 	.word	0x40013c00
 8001384:	40020000 	.word	0x40020000
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	b10a      	cbz	r2, 8001392 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	6181      	str	r1, [r0, #24]
 8001390:	4770      	bx	lr
 8001392:	0409      	lsls	r1, r1, #16
 8001394:	e7fb      	b.n	800138e <HAL_GPIO_WritePin+0x2>
	...

08001398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800139c:	4604      	mov	r4, r0
 800139e:	b908      	cbnz	r0, 80013a4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
 80013a2:	e03f      	b.n	8001424 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	07dd      	lsls	r5, r3, #31
 80013a8:	d410      	bmi.n	80013cc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	0798      	lsls	r0, r3, #30
 80013ae:	d45a      	bmi.n	8001466 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	071a      	lsls	r2, r3, #28
 80013b4:	f100 809c 	bmi.w	80014f0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	075b      	lsls	r3, r3, #29
 80013bc:	f100 80ba 	bmi.w	8001534 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c0:	69a0      	ldr	r0, [r4, #24]
 80013c2:	2800      	cmp	r0, #0
 80013c4:	f040 811b 	bne.w	80015fe <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80013c8:	2000      	movs	r0, #0
 80013ca:	e02b      	b.n	8001424 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013cc:	4ba4      	ldr	r3, [pc, #656]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	f002 020c 	and.w	r2, r2, #12
 80013d4:	2a04      	cmp	r2, #4
 80013d6:	d007      	beq.n	80013e8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013de:	2a08      	cmp	r2, #8
 80013e0:	d10a      	bne.n	80013f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	0259      	lsls	r1, r3, #9
 80013e6:	d507      	bpl.n	80013f8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b9d      	ldr	r3, [pc, #628]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	039a      	lsls	r2, r3, #14
 80013ee:	d5dc      	bpl.n	80013aa <HAL_RCC_OscConfig+0x12>
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1d9      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
 80013f6:	e7d3      	b.n	80013a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	4d99      	ldr	r5, [pc, #612]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d113      	bne.n	800142a <HAL_RCC_OscConfig+0x92>
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800140a:	f7ff fae7 	bl	80009dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4d94      	ldr	r5, [pc, #592]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001410:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	039b      	lsls	r3, r3, #14
 8001416:	d4c8      	bmi.n	80013aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fae0 	bl	80009dc <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	2864      	cmp	r0, #100	; 0x64
 8001420:	d9f7      	bls.n	8001412 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001422:	2003      	movs	r0, #3
}
 8001424:	b002      	add	sp, #8
 8001426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142e:	d104      	bne.n	800143a <HAL_RCC_OscConfig+0xa2>
 8001430:	682b      	ldr	r3, [r5, #0]
 8001432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001436:	602b      	str	r3, [r5, #0]
 8001438:	e7e3      	b.n	8001402 <HAL_RCC_OscConfig+0x6a>
 800143a:	682a      	ldr	r2, [r5, #0]
 800143c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001440:	602a      	str	r2, [r5, #0]
 8001442:	682a      	ldr	r2, [r5, #0]
 8001444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001448:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1dd      	bne.n	800140a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800144e:	f7ff fac5 	bl	80009dc <HAL_GetTick>
 8001452:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	039f      	lsls	r7, r3, #14
 8001458:	d5a7      	bpl.n	80013aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145a:	f7ff fabf 	bl	80009dc <HAL_GetTick>
 800145e:	1b80      	subs	r0, r0, r6
 8001460:	2864      	cmp	r0, #100	; 0x64
 8001462:	d9f7      	bls.n	8001454 <HAL_RCC_OscConfig+0xbc>
 8001464:	e7dd      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	f012 0f0c 	tst.w	r2, #12
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	2a08      	cmp	r2, #8
 8001478:	d111      	bne.n	800149e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	025e      	lsls	r6, r3, #9
 800147e:	d40e      	bmi.n	800149e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001480:	4b77      	ldr	r3, [pc, #476]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	0795      	lsls	r5, r2, #30
 8001486:	d502      	bpl.n	800148e <HAL_RCC_OscConfig+0xf6>
 8001488:	68e2      	ldr	r2, [r4, #12]
 800148a:	2a01      	cmp	r2, #1
 800148c:	d188      	bne.n	80013a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	6921      	ldr	r1, [r4, #16]
 8001492:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001496:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800149a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149c:	e788      	b.n	80013b0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800149e:	68e2      	ldr	r2, [r4, #12]
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x2cc>)
 80014a2:	b1b2      	cbz	r2, 80014d2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa98 	bl	80009dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	4d6c      	ldr	r5, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80014ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	0798      	lsls	r0, r3, #30
 80014b4:	d507      	bpl.n	80014c6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	6922      	ldr	r2, [r4, #16]
 80014ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014c2:	602b      	str	r3, [r5, #0]
 80014c4:	e774      	b.n	80013b0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fa89 	bl	80009dc <HAL_GetTick>
 80014ca:	1b80      	subs	r0, r0, r6
 80014cc:	2802      	cmp	r0, #2
 80014ce:	d9ef      	bls.n	80014b0 <HAL_RCC_OscConfig+0x118>
 80014d0:	e7a7      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80014d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014d4:	f7ff fa82 	bl	80009dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d8:	4d61      	ldr	r5, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80014da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	0799      	lsls	r1, r3, #30
 80014e0:	f57f af66 	bpl.w	80013b0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff fa7a 	bl	80009dc <HAL_GetTick>
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	2802      	cmp	r0, #2
 80014ec:	d9f6      	bls.n	80014dc <HAL_RCC_OscConfig+0x144>
 80014ee:	e798      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014f0:	6962      	ldr	r2, [r4, #20]
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x2d0>)
 80014f4:	b17a      	cbz	r2, 8001516 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa6f 	bl	80009dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4d58      	ldr	r5, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001500:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001504:	079f      	lsls	r7, r3, #30
 8001506:	f53f af57 	bmi.w	80013b8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fa67 	bl	80009dc <HAL_GetTick>
 800150e:	1b80      	subs	r0, r0, r6
 8001510:	2802      	cmp	r0, #2
 8001512:	d9f6      	bls.n	8001502 <HAL_RCC_OscConfig+0x16a>
 8001514:	e785      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001516:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001518:	f7ff fa60 	bl	80009dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4d50      	ldr	r5, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800151e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001522:	0798      	lsls	r0, r3, #30
 8001524:	f57f af48 	bpl.w	80013b8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fa58 	bl	80009dc <HAL_GetTick>
 800152c:	1b80      	subs	r0, r0, r6
 800152e:	2802      	cmp	r0, #2
 8001530:	d9f6      	bls.n	8001520 <HAL_RCC_OscConfig+0x188>
 8001532:	e776      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001534:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 8001536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001538:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800153c:	d128      	bne.n	8001590 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001542:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001552:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4d45      	ldr	r5, [pc, #276]	; (800166c <HAL_RCC_OscConfig+0x2d4>)
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	05d9      	lsls	r1, r3, #23
 800155a:	d51b      	bpl.n	8001594 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	68a3      	ldr	r3, [r4, #8]
 800155e:	4d40      	ldr	r5, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 8001560:	2b01      	cmp	r3, #1
 8001562:	d127      	bne.n	80015b4 <HAL_RCC_OscConfig+0x21c>
 8001564:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800156c:	f7ff fa36 	bl	80009dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	4d3b      	ldr	r5, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001572:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800157a:	079b      	lsls	r3, r3, #30
 800157c:	d539      	bpl.n	80015f2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800157e:	2e00      	cmp	r6, #0
 8001580:	f43f af1e 	beq.w	80013c0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4a36      	ldr	r2, [pc, #216]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 8001586:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	e717      	b.n	80013c0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001590:	2600      	movs	r6, #0
 8001592:	e7df      	b.n	8001554 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800159c:	f7ff fa1e 	bl	80009dc <HAL_GetTick>
 80015a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	05da      	lsls	r2, r3, #23
 80015a6:	d4d9      	bmi.n	800155c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a8:	f7ff fa18 	bl	80009dc <HAL_GetTick>
 80015ac:	1bc0      	subs	r0, r0, r7
 80015ae:	2802      	cmp	r0, #2
 80015b0:	d9f7      	bls.n	80015a2 <HAL_RCC_OscConfig+0x20a>
 80015b2:	e736      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d104      	bne.n	80015c2 <HAL_RCC_OscConfig+0x22a>
 80015b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	672b      	str	r3, [r5, #112]	; 0x70
 80015c0:	e7d0      	b.n	8001564 <HAL_RCC_OscConfig+0x1cc>
 80015c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	672a      	str	r2, [r5, #112]	; 0x70
 80015ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015cc:	f022 0204 	bic.w	r2, r2, #4
 80015d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ca      	bne.n	800156c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa01 	bl	80009dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015e2:	0798      	lsls	r0, r3, #30
 80015e4:	d5cb      	bpl.n	800157e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff f9f9 	bl	80009dc <HAL_GetTick>
 80015ea:	1bc0      	subs	r0, r0, r7
 80015ec:	4540      	cmp	r0, r8
 80015ee:	d9f7      	bls.n	80015e0 <HAL_RCC_OscConfig+0x248>
 80015f0:	e717      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f9f3 	bl	80009dc <HAL_GetTick>
 80015f6:	1bc0      	subs	r0, r0, r7
 80015f8:	4540      	cmp	r0, r8
 80015fa:	d9bd      	bls.n	8001578 <HAL_RCC_OscConfig+0x1e0>
 80015fc:	e711      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fe:	4d18      	ldr	r5, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
 8001600:	68ab      	ldr	r3, [r5, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d047      	beq.n	800169a <HAL_RCC_OscConfig+0x302>
 800160a:	4e19      	ldr	r6, [pc, #100]	; (8001670 <HAL_RCC_OscConfig+0x2d8>)
 800160c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001610:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001612:	d135      	bne.n	8001680 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001614:	f7ff f9e2 	bl	80009dc <HAL_GetTick>
 8001618:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	682b      	ldr	r3, [r5, #0]
 800161c:	0199      	lsls	r1, r3, #6
 800161e:	d429      	bmi.n	8001674 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001620:	6a22      	ldr	r2, [r4, #32]
 8001622:	69e3      	ldr	r3, [r4, #28]
 8001624:	4313      	orrs	r3, r2
 8001626:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001628:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800162c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800162e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001632:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001634:	4c0a      	ldr	r4, [pc, #40]	; (8001660 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001636:	0852      	lsrs	r2, r2, #1
 8001638:	3a01      	subs	r2, #1
 800163a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800163e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001640:	2301      	movs	r3, #1
 8001642:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001644:	f7ff f9ca 	bl	80009dc <HAL_GetTick>
 8001648:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	019a      	lsls	r2, r3, #6
 800164e:	f53f aebb 	bmi.w	80013c8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f9c3 	bl	80009dc <HAL_GetTick>
 8001656:	1b40      	subs	r0, r0, r5
 8001658:	2802      	cmp	r0, #2
 800165a:	d9f6      	bls.n	800164a <HAL_RCC_OscConfig+0x2b2>
 800165c:	e6e1      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000
 8001668:	42470e80 	.word	0x42470e80
 800166c:	40007000 	.word	0x40007000
 8001670:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f9b2 	bl	80009dc <HAL_GetTick>
 8001678:	1bc0      	subs	r0, r0, r7
 800167a:	2802      	cmp	r0, #2
 800167c:	d9cd      	bls.n	800161a <HAL_RCC_OscConfig+0x282>
 800167e:	e6d0      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001680:	f7ff f9ac 	bl	80009dc <HAL_GetTick>
 8001684:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	f57f ae9d 	bpl.w	80013c8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff f9a5 	bl	80009dc <HAL_GetTick>
 8001692:	1b00      	subs	r0, r0, r4
 8001694:	2802      	cmp	r0, #2
 8001696:	d9f6      	bls.n	8001686 <HAL_RCC_OscConfig+0x2ee>
 8001698:	e6c3      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169a:	2801      	cmp	r0, #1
 800169c:	f43f aec2 	beq.w	8001424 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80016a0:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	69e3      	ldr	r3, [r4, #28]
 80016a4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f47f ae79 	bne.w	80013a0 <HAL_RCC_OscConfig+0x8>
 80016ae:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f47f ae73 	bne.w	80013a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c0:	4003      	ands	r3, r0
 80016c2:	4293      	cmp	r3, r2
 80016c4:	f47f ae6c 	bne.w	80013a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ca:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f47f ae66 	bne.w	80013a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016d6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80016da:	1ac0      	subs	r0, r0, r3
 80016dc:	bf18      	it	ne
 80016de:	2001      	movne	r0, #1
 80016e0:	e6a0      	b.n	8001424 <HAL_RCC_OscConfig+0x8c>
 80016e2:	bf00      	nop

080016e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e4:	4913      	ldr	r1, [pc, #76]	; (8001734 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80016e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e8:	688b      	ldr	r3, [r1, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x16>
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f6:	4810      	ldr	r0, [pc, #64]	; (8001738 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016f8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80016fa:	4810      	ldr	r0, [pc, #64]	; (800173c <HAL_RCC_GetSysClockFreq+0x58>)
 80016fc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016fe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001700:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001704:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	bf14      	ite	ne
 800170a:	480c      	ldrne	r0, [pc, #48]	; (800173c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170c:	480a      	ldreq	r0, [pc, #40]	; (8001738 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001712:	bf18      	it	ne
 8001714:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001716:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	fba1 0100 	umull	r0, r1, r1, r0
 800171e:	f7fe ff8b 	bl	8000638 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_RCC_GetSysClockFreq+0x50>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800172e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001732:	bd08      	pop	{r3, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	00f42400 	.word	0x00f42400
 800173c:	007a1200 	.word	0x007a1200

08001740 <HAL_RCC_ClockConfig>:
{
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001744:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001746:	4604      	mov	r4, r0
 8001748:	b910      	cbnz	r0, 8001750 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
 800174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_RCC_ClockConfig+0x124>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f002 020f 	and.w	r2, r2, #15
 8001758:	428a      	cmp	r2, r1
 800175a:	d329      	bcc.n	80017b0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	6821      	ldr	r1, [r4, #0]
 800175e:	078f      	lsls	r7, r1, #30
 8001760:	d42e      	bmi.n	80017c0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	07c8      	lsls	r0, r1, #31
 8001764:	d441      	bmi.n	80017ea <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_ClockConfig+0x124>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	f002 020f 	and.w	r2, r2, #15
 800176e:	4295      	cmp	r5, r2
 8001770:	d367      	bcc.n	8001842 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	0751      	lsls	r1, r2, #29
 8001776:	d46d      	bmi.n	8001854 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	0713      	lsls	r3, r2, #28
 800177a:	d507      	bpl.n	800178c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177c:	4a3a      	ldr	r2, [pc, #232]	; (8001868 <HAL_RCC_ClockConfig+0x128>)
 800177e:	6921      	ldr	r1, [r4, #16]
 8001780:	6893      	ldr	r3, [r2, #8]
 8001782:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001786:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800178a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178c:	f7ff ffaa 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <HAL_RCC_ClockConfig+0x128>)
 8001792:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_RCC_ClockConfig+0x12c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	40d8      	lsrs	r0, r3
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_ClockConfig+0x130>)
 80017a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_ClockConfig+0x134>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f7ff f8cf 	bl	8000948 <HAL_InitTick>
  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4299      	cmp	r1, r3
 80017bc:	d1c5      	bne.n	800174a <HAL_RCC_ClockConfig+0xa>
 80017be:	e7cd      	b.n	800175c <HAL_RCC_ClockConfig+0x1c>
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c6:	bf1e      	ittt	ne
 80017c8:	689a      	ldrne	r2, [r3, #8]
 80017ca:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80017ce:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d2:	bf42      	ittt	mi
 80017d4:	689a      	ldrmi	r2, [r3, #8]
 80017d6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80017da:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	68a0      	ldr	r0, [r4, #8]
 80017e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017e4:	4302      	orrs	r2, r0
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e7bb      	b.n	8001762 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	6862      	ldr	r2, [r4, #4]
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <HAL_RCC_ClockConfig+0x128>)
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d11d      	bne.n	800182e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	d0a7      	beq.n	800174a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4e1b      	ldr	r6, [pc, #108]	; (8001868 <HAL_RCC_ClockConfig+0x128>)
 80017fc:	68b3      	ldr	r3, [r6, #8]
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	4313      	orrs	r3, r2
 8001804:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001806:	f7ff f8e9 	bl	80009dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800180e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001810:	68b3      	ldr	r3, [r6, #8]
 8001812:	6862      	ldr	r2, [r4, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800181c:	d0a3      	beq.n	8001766 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181e:	f7ff f8dd 	bl	80009dc <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	4540      	cmp	r0, r8
 8001826:	d9f3      	bls.n	8001810 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001828:	2003      	movs	r0, #3
}
 800182a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	1e91      	subs	r1, r2, #2
 8001830:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001834:	d802      	bhi.n	800183c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800183a:	e7dd      	b.n	80017f8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	f013 0f02 	tst.w	r3, #2
 8001840:	e7da      	b.n	80017f8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	b2ea      	uxtb	r2, r5
 8001844:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	429d      	cmp	r5, r3
 800184e:	f47f af7c 	bne.w	800174a <HAL_RCC_ClockConfig+0xa>
 8001852:	e78e      	b.n	8001772 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <HAL_RCC_ClockConfig+0x128>)
 8001856:	68e0      	ldr	r0, [r4, #12]
 8001858:	688b      	ldr	r3, [r1, #8]
 800185a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800185e:	4303      	orrs	r3, r0
 8001860:	608b      	str	r3, [r1, #8]
 8001862:	e789      	b.n	8001778 <HAL_RCC_ClockConfig+0x38>
 8001864:	40023c00 	.word	0x40023c00
 8001868:	40023800 	.word	0x40023800
 800186c:	08002f34 	.word	0x08002f34
 8001870:	20000020 	.word	0x20000020
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_RCC_GetPCLK1Freq+0x14>)
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x18>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001886:	6810      	ldr	r0, [r2, #0]
}
 8001888:	40d8      	lsrs	r0, r3
 800188a:	4770      	bx	lr
 800188c:	40023800 	.word	0x40023800
 8001890:	08002f44 	.word	0x08002f44
 8001894:	20000020 	.word	0x20000020

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018a6:	6810      	ldr	r0, [r2, #0]
}
 80018a8:	40d8      	lsrs	r0, r3
 80018aa:	4770      	bx	lr
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08002f44 	.word	0x08002f44
 80018b4:	20000020 	.word	0x20000020

080018b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018b8:	6a03      	ldr	r3, [r0, #32]
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018c0:	6a03      	ldr	r3, [r0, #32]
{
 80018c2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80018ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80018d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80018d2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80018d6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018d8:	4d0a      	ldr	r5, [pc, #40]	; (8001904 <TIM_OC1_SetConfig+0x4c>)
 80018da:	42a8      	cmp	r0, r5
 80018dc:	d10b      	bne.n	80018f6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80018de:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018e0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80018e2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80018e6:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80018e8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018ea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80018ee:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80018f0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80018f4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018f6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018f8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018fa:	684a      	ldr	r2, [r1, #4]
 80018fc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018fe:	6203      	str	r3, [r0, #32]
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	bf00      	nop
 8001904:	40010000 	.word	0x40010000

08001908 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001908:	6a03      	ldr	r3, [r0, #32]
 800190a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800190e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001910:	6a03      	ldr	r3, [r0, #32]
{
 8001912:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001914:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001916:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001918:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800191a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800191e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001920:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001922:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001926:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800192a:	4d0b      	ldr	r5, [pc, #44]	; (8001958 <TIM_OC3_SetConfig+0x50>)
 800192c:	42a8      	cmp	r0, r5
 800192e:	d10d      	bne.n	800194c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001930:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001932:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001938:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800193c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800193e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001942:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001948:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800194c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800194e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001950:	684a      	ldr	r2, [r1, #4]
 8001952:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001954:	6203      	str	r3, [r0, #32]
 8001956:	bd70      	pop	{r4, r5, r6, pc}
 8001958:	40010000 	.word	0x40010000

0800195c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800195c:	6a03      	ldr	r3, [r0, #32]
 800195e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001962:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001964:	6a03      	ldr	r3, [r0, #32]
{
 8001966:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001968:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800196a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800196c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800196e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001972:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001976:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800197c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001980:	4d06      	ldr	r5, [pc, #24]	; (800199c <TIM_OC4_SetConfig+0x40>)
 8001982:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001984:	bf02      	ittt	eq
 8001986:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001988:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800198c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001990:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001992:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001994:	684a      	ldr	r2, [r1, #4]
 8001996:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001998:	6203      	str	r3, [r0, #32]
 800199a:	bd30      	pop	{r4, r5, pc}
 800199c:	40010000 	.word	0x40010000

080019a0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a0:	6803      	ldr	r3, [r0, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b0:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80019b2:	bf1e      	ittt	ne
 80019b4:	681a      	ldrne	r2, [r3, #0]
 80019b6:	f042 0201 	orrne.w	r2, r2, #1
 80019ba:	601a      	strne	r2, [r3, #0]
}
 80019bc:	2000      	movs	r0, #0
 80019be:	4770      	bx	lr

080019c0 <HAL_TIM_PWM_MspInit>:
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIM_OC_DelayElapsedCallback>:
 80019c2:	4770      	bx	lr

080019c4 <HAL_TIM_IC_CaptureCallback>:
 80019c4:	4770      	bx	lr

080019c6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80019c6:	4770      	bx	lr

080019c8 <HAL_TIM_TriggerCallback>:
 80019c8:	4770      	bx	lr

080019ca <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ca:	6803      	ldr	r3, [r0, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	0791      	lsls	r1, r2, #30
{
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d4:	d50e      	bpl.n	80019f4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	0792      	lsls	r2, r2, #30
 80019da:	d50b      	bpl.n	80019f4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019dc:	f06f 0202 	mvn.w	r2, #2
 80019e0:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ea:	d077      	beq.n	8001adc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80019ec:	f7ff ffea 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f0:	2300      	movs	r3, #0
 80019f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	0750      	lsls	r0, r2, #29
 80019fa:	d510      	bpl.n	8001a1e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	0751      	lsls	r1, r2, #29
 8001a00:	d50d      	bpl.n	8001a1e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a02:	f06f 0204 	mvn.w	r2, #4
 8001a06:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a08:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a0a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a0c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a10:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a12:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a14:	d068      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	f7ff ffd5 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	0712      	lsls	r2, r2, #28
 8001a24:	d50f      	bpl.n	8001a46 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	0710      	lsls	r0, r2, #28
 8001a2a:	d50c      	bpl.n	8001a46 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a2c:	f06f 0208 	mvn.w	r2, #8
 8001a30:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a34:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a36:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a38:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a3c:	d05a      	beq.n	8001af4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	f7ff ffc1 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	2300      	movs	r3, #0
 8001a44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	06d2      	lsls	r2, r2, #27
 8001a4c:	d510      	bpl.n	8001a70 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	06d0      	lsls	r0, r2, #27
 8001a52:	d50d      	bpl.n	8001a70 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a54:	f06f 0210 	mvn.w	r2, #16
 8001a58:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a5a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a5c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a5e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a62:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a66:	d04b      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a68:	f7ff ffac 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	07d1      	lsls	r1, r2, #31
 8001a76:	d508      	bpl.n	8001a8a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	07d2      	lsls	r2, r2, #31
 8001a7c:	d505      	bpl.n	8001a8a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a7e:	f06f 0201 	mvn.w	r2, #1
 8001a82:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a84:	4620      	mov	r0, r4
 8001a86:	f000 fd77 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	0610      	lsls	r0, r2, #24
 8001a90:	d508      	bpl.n	8001aa4 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	0611      	lsls	r1, r2, #24
 8001a96:	d505      	bpl.n	8001aa4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f000 fa49 	bl	8001f36 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	0652      	lsls	r2, r2, #25
 8001aaa:	d508      	bpl.n	8001abe <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	0650      	lsls	r0, r2, #25
 8001ab0:	d505      	bpl.n	8001abe <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ab6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff85 	bl	80019c8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	0691      	lsls	r1, r2, #26
 8001ac4:	d522      	bpl.n	8001b0c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	0692      	lsls	r2, r2, #26
 8001aca:	d51f      	bpl.n	8001b0c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001acc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001ad0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad2:	611a      	str	r2, [r3, #16]
}
 8001ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001ad8:	f000 ba2c 	b.w	8001f34 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001adc:	f7ff ff71 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff ff70 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ae6:	e783      	b.n	80019f0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae8:	f7ff ff6b 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff ff6a 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001af2:	e792      	b.n	8001a1a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af4:	f7ff ff65 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7ff ff64 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001afe:	e7a0      	b.n	8001a42 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b00:	f7ff ff5f 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7ff ff5e 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b0a:	e7af      	b.n	8001a6c <HAL_TIM_IRQHandler+0xa2>
 8001b0c:	bd10      	pop	{r4, pc}
	...

08001b10 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b10:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001b12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b14:	4290      	cmp	r0, r2
 8001b16:	d00e      	beq.n	8001b36 <TIM_Base_SetConfig+0x26>
 8001b18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b1c:	d00b      	beq.n	8001b36 <TIM_Base_SetConfig+0x26>
 8001b1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b22:	4290      	cmp	r0, r2
 8001b24:	d007      	beq.n	8001b36 <TIM_Base_SetConfig+0x26>
 8001b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b2a:	4290      	cmp	r0, r2
 8001b2c:	d003      	beq.n	8001b36 <TIM_Base_SetConfig+0x26>
 8001b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b32:	4290      	cmp	r0, r2
 8001b34:	d115      	bne.n	8001b62 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001b36:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b3c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b3e:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <TIM_Base_SetConfig+0x94>)
 8001b40:	4290      	cmp	r0, r2
 8001b42:	d019      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b48:	d016      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b4e:	4290      	cmp	r0, r2
 8001b50:	d012      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b56:	4290      	cmp	r0, r2
 8001b58:	d00e      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b5e:	4290      	cmp	r0, r2
 8001b60:	d00a      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b62:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <TIM_Base_SetConfig+0x98>)
 8001b64:	4290      	cmp	r0, r2
 8001b66:	d007      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b6c:	4290      	cmp	r0, r2
 8001b6e:	d003      	beq.n	8001b78 <TIM_Base_SetConfig+0x68>
 8001b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b74:	4290      	cmp	r0, r2
 8001b76:	d103      	bne.n	8001b80 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b78:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b80:	694a      	ldr	r2, [r1, #20]
 8001b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001b88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8a:	688b      	ldr	r3, [r1, #8]
 8001b8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001b8e:	680b      	ldr	r3, [r1, #0]
 8001b90:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <TIM_Base_SetConfig+0x94>)
 8001b94:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001b96:	bf04      	itt	eq
 8001b98:	690b      	ldreq	r3, [r1, #16]
 8001b9a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6143      	str	r3, [r0, #20]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40014000 	.word	0x40014000

08001bac <HAL_TIM_Base_Init>:
{
 8001bac:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001bae:	4604      	mov	r4, r0
 8001bb0:	b1a0      	cbz	r0, 8001bdc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bba:	b91b      	cbnz	r3, 8001bc4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001bc0:	f000 ff84 	bl	8002acc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bca:	6820      	ldr	r0, [r4, #0]
 8001bcc:	1d21      	adds	r1, r4, #4
 8001bce:	f7ff ff9f 	bl	8001b10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
}
 8001bde:	bd10      	pop	{r4, pc}

08001be0 <HAL_TIM_PWM_Init>:
{
 8001be0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001be2:	4604      	mov	r4, r0
 8001be4:	b1a0      	cbz	r0, 8001c10 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001be6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bee:	b91b      	cbnz	r3, 8001bf8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bf0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001bf4:	f7ff fee4 	bl	80019c0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	1d21      	adds	r1, r4, #4
 8001c02:	f7ff ff85 	bl	8001b10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
}
 8001c12:	bd10      	pop	{r4, pc}

08001c14 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c14:	6a03      	ldr	r3, [r0, #32]
 8001c16:	f023 0310 	bic.w	r3, r3, #16
 8001c1a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c1c:	6a03      	ldr	r3, [r0, #32]
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001c20:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c22:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c26:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c30:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c38:	4d0b      	ldr	r5, [pc, #44]	; (8001c68 <TIM_OC2_SetConfig+0x54>)
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d10d      	bne.n	8001c5a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c3e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c40:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c4a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c4c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c50:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c56:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001c5a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c5c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c5e:	684a      	ldr	r2, [r1, #4]
 8001c60:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001c62:	6203      	str	r3, [r0, #32]
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_TIM_PWM_ConfigChannel>:
{
 8001c6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001c6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c72:	2b01      	cmp	r3, #1
{
 8001c74:	4604      	mov	r4, r0
 8001c76:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001c7a:	d025      	beq.n	8001cc8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001c82:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001c86:	2a0c      	cmp	r2, #12
 8001c88:	d818      	bhi.n	8001cbc <HAL_TIM_PWM_ConfigChannel+0x50>
 8001c8a:	e8df f002 	tbb	[pc, r2]
 8001c8e:	1707      	.short	0x1707
 8001c90:	171e1717 	.word	0x171e1717
 8001c94:	172f1717 	.word	0x172f1717
 8001c98:	1717      	.short	0x1717
 8001c9a:	40          	.byte	0x40
 8001c9b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c9c:	6820      	ldr	r0, [r4, #0]
 8001c9e:	f7ff fe0b 	bl	80018b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ca2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ca4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	f042 0208 	orr.w	r2, r2, #8
 8001cac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	f022 0204 	bic.w	r2, r2, #4
 8001cb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cba:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001cbc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001cbe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001cc4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cca:	6820      	ldr	r0, [r4, #0]
 8001ccc:	f7ff ffa2 	bl	8001c14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cd0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cd2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cea:	e7e6      	b.n	8001cba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cec:	6820      	ldr	r0, [r4, #0]
 8001cee:	f7ff fe0b 	bl	8001908 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cf2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cf4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	f042 0208 	orr.w	r2, r2, #8
 8001cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cfe:	69da      	ldr	r2, [r3, #28]
 8001d00:	f022 0204 	bic.w	r2, r2, #4
 8001d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d0a:	61da      	str	r2, [r3, #28]
      break;
 8001d0c:	e7d6      	b.n	8001cbc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d0e:	6820      	ldr	r0, [r4, #0]
 8001d10:	f7ff fe24 	bl	800195c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d14:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d16:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d2e:	e7ec      	b.n	8001d0a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d30:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d32:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d34:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d36:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d3a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001d3e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d40:	6083      	str	r3, [r0, #8]
 8001d42:	bd10      	pop	{r4, pc}

08001d44 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
{
 8001d4a:	b570      	push	{r4, r5, r6, lr}
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d52:	d019      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d58:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d60:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d6a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d6c:	680b      	ldr	r3, [r1, #0]
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d065      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0xfa>
 8001d72:	d815      	bhi.n	8001da0 <HAL_TIM_ConfigClockSource+0x5c>
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d00c      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x4e>
 8001d78:	d807      	bhi.n	8001d8a <HAL_TIM_ConfigClockSource+0x46>
 8001d7a:	b153      	cbz	r3, 8001d92 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d7e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d84:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d001      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x4e>
 8001d8e:	2b30      	cmp	r3, #48	; 0x30
 8001d90:	d1f4      	bne.n	8001d7c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001d92:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d94:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	e01a      	b.n	8001dd6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001da0:	2b60      	cmp	r3, #96	; 0x60
 8001da2:	d034      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0xca>
 8001da4:	d819      	bhi.n	8001dda <HAL_TIM_ConfigClockSource+0x96>
 8001da6:	2b50      	cmp	r3, #80	; 0x50
 8001da8:	d1e8      	bne.n	8001d7c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001daa:	684a      	ldr	r2, [r1, #4]
 8001dac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db0:	6a05      	ldr	r5, [r0, #32]
 8001db2:	f025 0501 	bic.w	r5, r5, #1
 8001db6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001db8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dba:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dc2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001dc6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001dc8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001dca:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001dcc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dd2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001dd6:	6083      	str	r3, [r0, #8]
 8001dd8:	e7d0      	b.n	8001d7c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001dda:	2b70      	cmp	r3, #112	; 0x70
 8001ddc:	d00c      	beq.n	8001df8 <HAL_TIM_ConfigClockSource+0xb4>
 8001dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de2:	d1cb      	bne.n	8001d7c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001de4:	68cb      	ldr	r3, [r1, #12]
 8001de6:	684a      	ldr	r2, [r1, #4]
 8001de8:	6889      	ldr	r1, [r1, #8]
 8001dea:	f7ff ffa1 	bl	8001d30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	6893      	ldr	r3, [r2, #8]
 8001df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df6:	e008      	b.n	8001e0a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001df8:	68cb      	ldr	r3, [r1, #12]
 8001dfa:	684a      	ldr	r2, [r1, #4]
 8001dfc:	6889      	ldr	r1, [r1, #8]
 8001dfe:	f7ff ff97 	bl	8001d30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e0a:	6093      	str	r3, [r2, #8]
      break;
 8001e0c:	e7b6      	b.n	8001d7c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e0e:	684d      	ldr	r5, [r1, #4]
 8001e10:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e12:	6a01      	ldr	r1, [r0, #32]
 8001e14:	f021 0110 	bic.w	r1, r1, #16
 8001e18:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e1a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e1c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e1e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e2a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001e2e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e30:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e32:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e38:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001e3c:	e7cb      	b.n	8001dd6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3e:	684a      	ldr	r2, [r1, #4]
 8001e40:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e42:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e44:	6a05      	ldr	r5, [r0, #32]
 8001e46:	f025 0501 	bic.w	r5, r5, #1
 8001e4a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e4c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e4e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e56:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e5a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e5c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e5e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e60:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e66:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001e6a:	e7b4      	b.n	8001dd6 <HAL_TIM_ConfigClockSource+0x92>

08001e6c <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e6c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e6e:	f001 011f 	and.w	r1, r1, #31
{
 8001e72:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e74:	2401      	movs	r4, #1
 8001e76:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e78:	ea23 0304 	bic.w	r3, r3, r4
 8001e7c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e7e:	6a03      	ldr	r3, [r0, #32]
 8001e80:	408a      	lsls	r2, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	6202      	str	r2, [r0, #32]
 8001e86:	bd10      	pop	{r4, pc}

08001e88 <HAL_TIM_PWM_Start>:
{
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	6800      	ldr	r0, [r0, #0]
 8001e90:	f7ff ffec 	bl	8001e6c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_TIM_PWM_Start+0x34>)
 8001e98:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001e9a:	bf02      	ittt	eq
 8001e9c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001e9e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001ea2:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eaa:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001eac:	bf1e      	ittt	ne
 8001eae:	681a      	ldrne	r2, [r3, #0]
 8001eb0:	f042 0201 	orrne.w	r2, r2, #1
 8001eb4:	601a      	strne	r2, [r3, #0]
}
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000

08001ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ec0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
{
 8001ec6:	b530      	push	{r4, r5, lr}
 8001ec8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001ecc:	d02d      	beq.n	8001f2a <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ece:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ed2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ed4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001ed6:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ed8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001edc:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ede:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001ee0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001ee4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ee6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	4c11      	ldr	r4, [pc, #68]	; (8001f30 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8001eea:	42a3      	cmp	r3, r4
 8001eec:	d012      	beq.n	8001f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d00f      	beq.n	8001f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001ef4:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001ef8:	42a3      	cmp	r3, r4
 8001efa:	d00b      	beq.n	8001f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001efc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f00:	42a3      	cmp	r3, r4
 8001f02:	d007      	beq.n	8001f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f08:	42a3      	cmp	r3, r4
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f0c:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8001f10:	42a3      	cmp	r3, r4
 8001f12:	d104      	bne.n	8001f1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f14:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f1a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f24:	2300      	movs	r3, #0
 8001f26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f2a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f2c:	bd30      	pop	{r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000

08001f34 <HAL_TIMEx_CommutCallback>:
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f36:	4770      	bx	lr

08001f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f3a:	6803      	ldr	r3, [r0, #0]
 8001f3c:	68c1      	ldr	r1, [r0, #12]
 8001f3e:	691a      	ldr	r2, [r3, #16]
{
 8001f40:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f46:	430a      	orrs	r2, r1
 8001f48:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f4a:	6925      	ldr	r5, [r4, #16]
 8001f4c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f4e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f50:	69c0      	ldr	r0, [r0, #28]
 8001f52:	432a      	orrs	r2, r5
 8001f54:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001f56:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001f5c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001f62:	430a      	orrs	r2, r1
 8001f64:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	69a1      	ldr	r1, [r4, #24]
 8001f6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f6e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f74:	615a      	str	r2, [r3, #20]
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f78:	d129      	bne.n	8001fce <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <UART_SetConfig+0x4e>
 8001f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d120      	bne.n	8001fc8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f86:	f7ff fc87 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f8a:	6862      	ldr	r2, [r4, #4]
 8001f8c:	6825      	ldr	r5, [r4, #0]
 8001f8e:	1892      	adds	r2, r2, r2
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0119 	mov.w	r1, #25
 8001f98:	415b      	adcs	r3, r3
 8001f9a:	fba0 0101 	umull	r0, r1, r0, r1
 8001f9e:	f7fe fb4b 	bl	8000638 <__aeabi_uldivmod>
 8001fa2:	2164      	movs	r1, #100	; 0x64
 8001fa4:	fbb0 f4f1 	udiv	r4, r0, r1
 8001fa8:	fb01 0314 	mls	r3, r1, r4, r0
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	3332      	adds	r3, #50	; 0x32
 8001fb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb4:	f003 0207 	and.w	r2, r3, #7
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001fbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fc2:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fc4:	60ab      	str	r3, [r5, #8]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fc8:	f7ff fc56 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001fcc:	e7dd      	b.n	8001f8a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d002      	beq.n	8001fd8 <UART_SetConfig+0xa0>
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <UART_SetConfig+0xd8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d116      	bne.n	8002006 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fd8:	f7ff fc5e 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fdc:	6863      	ldr	r3, [r4, #4]
 8001fde:	6825      	ldr	r5, [r4, #0]
 8001fe0:	2119      	movs	r1, #25
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	fba0 0101 	umull	r0, r1, r0, r1
 8001fe8:	0f9b      	lsrs	r3, r3, #30
 8001fea:	f7fe fb25 	bl	8000638 <__aeabi_uldivmod>
 8001fee:	2264      	movs	r2, #100	; 0x64
 8001ff0:	fbb0 f1f2 	udiv	r1, r0, r2
 8001ff4:	fb02 0311 	mls	r3, r2, r1, r0
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	3332      	adds	r3, #50	; 0x32
 8001ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002000:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002004:	e7de      	b.n	8001fc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002006:	f7ff fc37 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 800200a:	e7e7      	b.n	8001fdc <UART_SetConfig+0xa4>
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400

08002014 <HAL_UART_Init>:
{
 8002014:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002016:	4604      	mov	r4, r0
 8002018:	b340      	cbz	r0, 800206c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800201a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800201e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002022:	b91b      	cbnz	r3, 800202c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002024:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002028:	f000 fea0 	bl	8002d6c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800202c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800202e:	2324      	movs	r3, #36	; 0x24
 8002030:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002034:	68d3      	ldr	r3, [r2, #12]
 8002036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800203a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff ff7b 	bl	8001f38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800204a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002052:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800205a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800205e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002062:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002066:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800206a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800206c:	2001      	movs	r0, #1
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002070:	b530      	push	{r4, r5, lr}
 8002072:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002074:	2100      	movs	r1, #0
 8002076:	2210      	movs	r2, #16
 8002078:	4668      	mov	r0, sp
 800207a:	f000 fefd 	bl	8002e78 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800207e:	4837      	ldr	r0, [pc, #220]	; (800215c <MX_ADC1_Init+0xec>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002080:	4937      	ldr	r1, [pc, #220]	; (8002160 <MX_ADC1_Init+0xf0>)
 8002082:	2400      	movs	r4, #0
 8002084:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002088:	e880 001a 	stmia.w	r0, {r1, r3, r4}
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <MX_ADC1_Init+0xf4>)
 800208e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8002090:	2501      	movs	r5, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 8;
 8002092:	2308      	movs	r3, #8
  hadc1.Init.ScanConvMode = ENABLE;
 8002094:	6105      	str	r5, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002096:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002098:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800209c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 8;
 80020a0:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020a2:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020a6:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a8:	f7fe fc9e 	bl	80009e8 <HAL_ADC_Init>
 80020ac:	b108      	cbz	r0, 80020b2 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80020ae:	f000 fc77 	bl	80029a0 <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b2:	4669      	mov	r1, sp
 80020b4:	4829      	ldr	r0, [pc, #164]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020b6:	9402      	str	r4, [sp, #8]
  sConfig.Rank = 1;
 80020b8:	e88d 0030 	stmia.w	sp, {r4, r5}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	f7fe fe04 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 80020c0:	b108      	cbz	r0, 80020c6 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 80020c2:	f000 fc6d 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
 80020c6:	2201      	movs	r2, #1
 80020c8:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ca:	4669      	mov	r1, sp
 80020cc:	4823      	ldr	r0, [pc, #140]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Rank = 2;
 80020ce:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d2:	f7fe fdf9 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 80020d6:	b108      	cbz	r0, 80020dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80020d8:	f000 fc62 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020dc:	2404      	movs	r4, #4
  sConfig.Rank = 3;
 80020de:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e0:	4669      	mov	r1, sp
 80020e2:	481e      	ldr	r0, [pc, #120]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Channel = ADC_CHANNEL_4;
 80020e4:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 3;
 80020e6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e8:	f7fe fdee 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 80020ec:	b108      	cbz	r0, 80020f2 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80020ee:	f000 fc57 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020f2:	2308      	movs	r3, #8
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	4669      	mov	r1, sp
 80020f6:	4819      	ldr	r0, [pc, #100]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Rank = 4;
 80020f8:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020fc:	f7fe fde4 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 8002100:	b108      	cbz	r0, 8002106 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002102:	f000 fc4d 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 5;
 8002106:	2309      	movs	r3, #9
 8002108:	2405      	movs	r4, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210a:	4669      	mov	r1, sp
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Rank = 5;
 800210e:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002112:	f7fe fdd9 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 8002116:	b108      	cbz	r0, 800211c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002118:	f000 fc42 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800211c:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 6;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800211e:	4669      	mov	r1, sp
  sConfig.Rank = 6;
 8002120:	2406      	movs	r4, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002122:	480e      	ldr	r0, [pc, #56]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Rank = 6;
 8002124:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002126:	f7fe fdcf 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 800212a:	b108      	cbz	r0, 8002130 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800212c:	f000 fc38 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002130:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 7;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002132:	4669      	mov	r1, sp
  sConfig.Rank = 7;
 8002134:	2407      	movs	r4, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Rank = 7;
 8002138:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213a:	f7fe fdc5 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 800213e:	b108      	cbz	r0, 8002144 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8002140:	f000 fc2e 	bl	80029a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = 8;
 8002144:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002146:	4669      	mov	r1, sp
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_ADC1_Init+0xec>)
  sConfig.Channel = ADC_CHANNEL_7;
 800214a:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 8;
 800214c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214e:	f7fe fdbb 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 8002152:	b108      	cbz	r0, 8002158 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002154:	f000 fc24 	bl	80029a0 <Error_Handler>
  }

}
 8002158:	b005      	add	sp, #20
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	2000006c 	.word	0x2000006c
 8002160:	40012000 	.word	0x40012000
 8002164:	0f000001 	.word	0x0f000001

08002168 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4606      	mov	r6, r0
 800216c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	2214      	movs	r2, #20
 8002170:	2100      	movs	r1, #0
 8002172:	a803      	add	r0, sp, #12
 8002174:	f000 fe80 	bl	8002e78 <memset>
  if(adcHandle->Instance==ADC1)
 8002178:	6832      	ldr	r2, [r6, #0]
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_ADC_MspInit+0xb4>)
 800217c:	429a      	cmp	r2, r3
 800217e:	d14b      	bne.n	8002218 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002180:	2500      	movs	r5, #0
 8002182:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002186:	9500      	str	r5, [sp, #0]
 8002188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = SENSOR_LS_Pin|SENSOR_L1_Pin|SENSOR_L2_Pin|SENSOR_R1_Pin 
                          |SENSOR_R2_Pin|SENSOR_RS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	4825      	ldr	r0, [pc, #148]	; (8002220 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800218c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
 8002192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002194:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002198:	9200      	str	r2, [sp, #0]
 800219a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	9501      	str	r5, [sp, #4]
 800219e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
 80021a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a8:	f002 0201 	and.w	r2, r2, #1
 80021ac:	9201      	str	r2, [sp, #4]
 80021ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	9502      	str	r5, [sp, #8]
 80021b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b4:	f042 0202 	orr.w	r2, r2, #2
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c2:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = SENSOR_LS_Pin|SENSOR_L1_Pin|SENSOR_L2_Pin|SENSOR_R1_Pin 
 80021c8:	23f3      	movs	r3, #243	; 0xf3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SENSOR_LS_Pin|SENSOR_L1_Pin|SENSOR_L2_Pin|SENSOR_R1_Pin 
 80021cc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f7ff f80f 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_S1_Pin|SENSOR_S2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	4814      	ldr	r0, [pc, #80]	; (8002224 <HAL_ADC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = SENSOR_S1_Pin|SENSOR_S2_Pin;
 80021d4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	9505      	str	r5, [sp, #20]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021dc:	4c12      	ldr	r4, [pc, #72]	; (8002228 <HAL_ADC_MspInit+0xc0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	f7ff f807 	bl	80011f0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e4:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021e6:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ee:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f4:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fa:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021fc:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021fe:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002202:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002204:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002206:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002208:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800220a:	f7fe fe7f 	bl	8000f0c <HAL_DMA_Init>
 800220e:	b108      	cbz	r0, 8002214 <HAL_ADC_MspInit+0xac>
    {
      Error_Handler();
 8002210:	f000 fbc6 	bl	80029a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002214:	63b4      	str	r4, [r6, #56]	; 0x38
 8002216:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002218:	b008      	add	sp, #32
 800221a:	bd70      	pop	{r4, r5, r6, pc}
 800221c:	40012000 	.word	0x40012000
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	200000b4 	.word	0x200000b4
 800222c:	40026410 	.word	0x40026410

08002230 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002230:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <MX_DMA_Init+0x30>)
 8002234:	2200      	movs	r2, #0
 8002236:	9201      	str	r2, [sp, #4]
 8002238:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800223a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800223e:	6319      	str	r1, [r3, #48]	; 0x30
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002248:	4611      	mov	r1, r2
 800224a:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800224c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800224e:	f7fe fdef 	bl	8000e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002252:	2038      	movs	r0, #56	; 0x38
 8002254:	f7fe fe20 	bl	8000e98 <HAL_NVIC_EnableIRQ>

}
 8002258:	b003      	add	sp, #12
 800225a:	f85d fb04 	ldr.w	pc, [sp], #4
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002266:	2214      	movs	r2, #20
{
 8002268:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	eb0d 0002 	add.w	r0, sp, r2
 800226e:	2100      	movs	r1, #0
 8002270:	f000 fe02 	bl	8002e78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002274:	2400      	movs	r4, #0
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <MX_GPIO_Init+0xb0>)
 8002278:	9401      	str	r4, [sp, #4]
 800227a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_Pin|L_SILNIK2_Pin|L_SILNIK1_Pin, GPIO_PIN_RESET);
 800227c:	4f26      	ldr	r7, [pc, #152]	; (8002318 <MX_GPIO_Init+0xb4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_SILNIK1_Pin|R_SILNIK2_Pin, GPIO_PIN_RESET);
 800227e:	4d27      	ldr	r5, [pc, #156]	; (800231c <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
 8002286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002288:	f002 0204 	and.w	r2, r2, #4
 800228c:	9201      	str	r2, [sp, #4]
 800228e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002290:	9402      	str	r4, [sp, #8]
 8002292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
 800229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80022a0:	9202      	str	r2, [sp, #8]
 80022a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	9403      	str	r4, [sp, #12]
 80022a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
 80022ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b0:	f002 0201 	and.w	r2, r2, #1
 80022b4:	9203      	str	r2, [sp, #12]
 80022b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b8:	9404      	str	r4, [sp, #16]
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	f042 0202 	orr.w	r2, r2, #2
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, RGB_Pin|L_SILNIK2_Pin|L_SILNIK1_Pin, GPIO_PIN_RESET);
 80022ca:	4622      	mov	r2, r4
 80022cc:	4638      	mov	r0, r7
 80022ce:	f241 0128 	movw	r1, #4136	; 0x1028
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, RGB_Pin|L_SILNIK2_Pin|L_SILNIK1_Pin, GPIO_PIN_RESET);
 80022d4:	f7ff f85a 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, R_SILNIK1_Pin|R_SILNIK2_Pin, GPIO_PIN_RESET);
 80022d8:	4622      	mov	r2, r4
 80022da:	4628      	mov	r0, r5
 80022dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80022e0:	f7ff f854 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RGB_Pin|L_SILNIK2_Pin|L_SILNIK1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = RGB_Pin|L_SILNIK2_Pin|L_SILNIK1_Pin;
 80022e6:	f241 0328 	movw	r3, #4136	; 0x1028
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	a905      	add	r1, sp, #20
 80022ec:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = RGB_Pin|L_SILNIK2_Pin|L_SILNIK1_Pin;
 80022ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	f7fe ff7b 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R_SILNIK1_Pin|R_SILNIK2_Pin;
 80022fa:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	a905      	add	r1, sp, #20
 8002300:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = R_SILNIK1_Pin|R_SILNIK2_Pin;
 8002302:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f7fe ff71 	bl	80011f0 <HAL_GPIO_Init>

}
 800230e:	b00b      	add	sp, #44	; 0x2c
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400
 800231c:	40020000 	.word	0x40020000

08002320 <SpeedEngine>:



	void SpeedEngine(int RightValue, int LeftValue)
	{
		if (RightValue > max)	RightValue = max;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <SpeedEngine+0x28>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4298      	cmp	r0, r3
 8002326:	bfa8      	it	ge
 8002328:	4618      	movge	r0, r3
 800232a:	4299      	cmp	r1, r3
 800232c:	bfa8      	it	ge
 800232e:	4619      	movge	r1, r3
		if (LeftValue > max)	LeftValue = max;
		//if (RightValue < 0)		RightValue = 0;
		//if (LeftValue < 0)		LeftValue = 0;

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, RightValue);
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SpeedEngine+0x2c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	63d8      	str	r0, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LeftValue);
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <SpeedEngine+0x30>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6359      	str	r1, [r3, #52]	; 0x34

		ActualRight = RightValue;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SpeedEngine+0x34>)
 800233e:	6018      	str	r0, [r3, #0]
		ActualLeft = LeftValue;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SpeedEngine+0x38>)
 8002342:	6019      	str	r1, [r3, #0]
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	2000001c 	.word	0x2000001c
 800234c:	20000214 	.word	0x20000214
 8002350:	20000194 	.word	0x20000194
 8002354:	20000044 	.word	0x20000044
 8002358:	20000040 	.word	0x20000040

0800235c <HAL_Values>:




	void HAL_Values()
	{
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	4d23      	ldr	r5, [pc, #140]	; (80023ec <HAL_Values+0x90>)
		  for (int i = 0; i<=7; i++)
		  {

			  	ValueOfSensor = SensorValue[i];
 8002360:	4e23      	ldr	r6, [pc, #140]	; (80023f0 <HAL_Values+0x94>)
	{
 8002362:	ed2d 8b04 	vpush	{d8-d9}

			  	if (ValueOfSensor <= 500)
 8002366:	ed9f 8a23 	vldr	s16, [pc, #140]	; 80023f4 <HAL_Values+0x98>
			  		ValueOfSensor = 0;
 800236a:	eddf 9a23 	vldr	s19, [pc, #140]	; 80023f8 <HAL_Values+0x9c>
			  	else if (ValueOfSensor < 3500 && ValueOfSensor > 500)
 800236e:	eddf 8a23 	vldr	s17, [pc, #140]	; 80023fc <HAL_Values+0xa0>
			  		{
			  		ValueOfSensor = ValueOfSensor / 3500;

			  		ValueOfSensor = ValueOfSensor * 100;
 8002372:	ed9f 9a23 	vldr	s18, [pc, #140]	; 8002400 <HAL_Values+0xa4>
		  for (int i = 0; i<=7; i++)
 8002376:	2400      	movs	r4, #0
			  	ValueOfSensor = SensorValue[i];
 8002378:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
			  	if (ValueOfSensor <= 500)
 8002384:	eef4 7ac8 	vcmpe.f32	s15, s16
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d928      	bls.n	80023e0 <HAL_Values+0x84>
			  	else if (ValueOfSensor < 3500 && ValueOfSensor > 500)
 800238e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	d526      	bpl.n	80023e6 <HAL_Values+0x8a>
 8002398:	eef4 7ac8 	vcmpe.f32	s15, s16
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	dd21      	ble.n	80023e6 <HAL_Values+0x8a>
			  		ValueOfSensor = ValueOfSensor / 3500;
 80023a2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
			  		ValueOfSensor = round(ValueOfSensor);
 80023a6:	ee67 7a09 	vmul.f32	s15, s14, s18
 80023aa:	ee17 0a90 	vmov	r0, s15
 80023ae:	f7fe f877 	bl	80004a0 <__aeabi_f2d>
 80023b2:	ec41 0b10 	vmov	d0, r0, r1
 80023b6:	f000 fd67 	bl	8002e88 <round>
 80023ba:	ec51 0b10 	vmov	r0, r1, d0
 80023be:	f7fe f8eb 	bl	8000598 <__aeabi_d2f>
			  		ValueOfSensor = ValueOfSensor / 100;
 80023c2:	ee07 0a10 	vmov	s14, r0
 80023c6:	eec7 7a09 	vdiv.f32	s15, s14, s18
		  for (int i = 0; i<=7; i++)
 80023ca:	3401      	adds	r4, #1
 80023cc:	2c08      	cmp	r4, #8
			  	else
			  		ValueOfSensor = 1;



			 NewSensor[i] = ValueOfSensor;
 80023ce:	ece5 7a01 	vstmia	r5!, {s15}
		  for (int i = 0; i<=7; i++)
 80023d2:	d1d1      	bne.n	8002378 <HAL_Values+0x1c>

		  }
	}
 80023d4:	ecbd 8b04 	vpop	{d8-d9}
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_Values+0xa8>)
 80023da:	edc3 7a00 	vstr	s15, [r3]
 80023de:	bd70      	pop	{r4, r5, r6, pc}
			  		ValueOfSensor = 0;
 80023e0:	eef0 7a69 	vmov.f32	s15, s19
 80023e4:	e7f1      	b.n	80023ca <HAL_Values+0x6e>
			  		ValueOfSensor = 1;
 80023e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80023ea:	e7ee      	b.n	80023ca <HAL_Values+0x6e>
 80023ec:	20000128 	.word	0x20000128
 80023f0:	20000114 	.word	0x20000114
 80023f4:	43fa0000 	.word	0x43fa0000
 80023f8:	00000000 	.word	0x00000000
 80023fc:	455ac000 	.word	0x455ac000
 8002400:	42c80000 	.word	0x42c80000
 8002404:	20000150 	.word	0x20000150

08002408 <HAL_Odczyt>:

	void HAL_Odczyt (float Sensor_LS, float Sensor_L1, float Sensor_L2, float Sensor_S1, float Sensor_S2, float Sensor_R1, float Sensor_R2, float Sensor_RS)
	{
 8002408:	b510      	push	{r4, lr}
		if (Sensor_RS > 0 && Sensor_LS == 0)
 800240a:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
 8002412:	ed2d 8b02 	vpush	{d8}
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_Odczyt+0x160>)
 8002418:	4c54      	ldr	r4, [pc, #336]	; (800256c <HAL_Odczyt+0x164>)
		if (Sensor_RS > 0 && Sensor_LS == 0)
 800241a:	dd32      	ble.n	8002482 <HAL_Odczyt+0x7a>
 800241c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	d146      	bne.n	80024b4 <HAL_Odczyt+0xac>
		{
			Sum = Sensor_RS * 8 + Sensor_R2 * 4;
 8002426:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800242a:	ee63 7a27 	vmul.f32	s15, s6, s15
 800242e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002432:	eee3 7a87 	vfma.f32	s15, s7, s14
			Value = Sum / (Sensor_RS + Sensor_R2);
 8002436:	ee33 3a83 	vadd.f32	s6, s7, s6
			Sum = Sensor_RS * 8 + Sensor_R2 * 4;
 800243a:	edc3 7a00 	vstr	s15, [r3]
			Value = Sum / (Sensor_RS + Sensor_R2);
 800243e:	ee87 7a83 	vdiv.f32	s14, s15, s6
		}

		else
		{
			Sum = Sensor_S1 * (-1) + Sensor_S2;
			Value = Sum / (Sensor_S1 + Sensor_S2);
 8002442:	ed84 7a00 	vstr	s14, [r4]
		}


		Value = Value * 100;
 8002446:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8002570 <HAL_Odczyt+0x168>
 800244a:	edd4 7a00 	vldr	s15, [r4]
		Value = round(Value);
 800244e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002452:	ee17 0a90 	vmov	r0, s15
 8002456:	f7fe f823 	bl	80004a0 <__aeabi_f2d>
 800245a:	ec41 0b10 	vmov	d0, r0, r1
 800245e:	f000 fd13 	bl	8002e88 <round>
 8002462:	ec51 0b10 	vmov	r0, r1, d0
 8002466:	f7fe f897 	bl	8000598 <__aeabi_d2f>
		Value = Value / 100;
 800246a:	ee07 0a10 	vmov	s14, r0
 800246e:	eec7 7a08 	vdiv.f32	s15, s14, s16

		ActualSensorValue = Value;


	}
 8002472:	ecbd 8b02 	vpop	{d8}
		ActualSensorValue = Value;
 8002476:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_Odczyt+0x16c>)
		Value = Value / 100;
 8002478:	edc4 7a00 	vstr	s15, [r4]
		ActualSensorValue = Value;
 800247c:	edc3 7a00 	vstr	s15, [r3]
	}
 8002480:	bd10      	pop	{r4, pc}
		else if (Sensor_LS > 0 && Sensor_RS == 0)
 8002482:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dd13      	ble.n	80024b4 <HAL_Odczyt+0xac>
 800248c:	eef5 3a40 	vcmp.f32	s7, #0.0
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	d10e      	bne.n	80024b4 <HAL_Odczyt+0xac>
			Sum = Sensor_LS * (-8) + Sensor_L1 * (-4);
 8002496:	eef9 7a00 	vmov.f32	s15, #144	; 0xc0800000 -4.0
 800249a:	ee60 7aa7 	vmul.f32	s15, s1, s15
 800249e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80024a2:	eee0 7a07 	vfma.f32	s15, s0, s14
			Value = Sum / (Sensor_LS + Sensor_L1);
 80024a6:	ee70 0a20 	vadd.f32	s1, s0, s1
			Sum = Sensor_LS * (-8) + Sensor_L1 * (-4);
 80024aa:	edc3 7a00 	vstr	s15, [r3]
			Value = Sum / (Sensor_L2 + Sensor_S1);
 80024ae:	ee87 7aa0 	vdiv.f32	s14, s15, s1
 80024b2:	e7c6      	b.n	8002442 <HAL_Odczyt+0x3a>
		else if (Sensor_R2 > 0 && Sensor_L1 == 0)
 80024b4:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	dd11      	ble.n	80024e2 <HAL_Odczyt+0xda>
 80024be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c6:	d123      	bne.n	8002510 <HAL_Odczyt+0x108>
			Sum = Sensor_R2 * 4 + Sensor_R1 * 2;
 80024c8:	ee72 7aa2 	vadd.f32	s15, s5, s5
 80024cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024d0:	eee3 7a07 	vfma.f32	s15, s6, s14
			Value = Sum / (Sensor_R2 + Sensor_R1);
 80024d4:	ee73 2a22 	vadd.f32	s5, s6, s5
			Sum = Sensor_R2 * 4 + Sensor_R1 * 2;
 80024d8:	edc3 7a00 	vstr	s15, [r3]
			Value = Sum / (Sensor_S1 + Sensor_S2);
 80024dc:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 80024e0:	e7af      	b.n	8002442 <HAL_Odczyt+0x3a>
		else if (Sensor_L1 > 0 && Sensor_R2 == 0)
 80024e2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	dd11      	ble.n	8002510 <HAL_Odczyt+0x108>
 80024ec:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d10c      	bne.n	8002510 <HAL_Odczyt+0x108>
			Sum = Sensor_L1 * (-4) + Sensor_L2 * (-2);
 80024f6:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80024fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80024fe:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8002502:	eee0 7a87 	vfma.f32	s15, s1, s14
			Value = Sum / (Sensor_L1 + Sensor_L2);
 8002506:	ee70 0a81 	vadd.f32	s1, s1, s2
			Sum = Sensor_L1 * (-4) + Sensor_L2 * (-2);
 800250a:	edc3 7a00 	vstr	s15, [r3]
 800250e:	e7ce      	b.n	80024ae <HAL_Odczyt+0xa6>
		else if (Sensor_R1 > 0)
 8002510:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	dd0c      	ble.n	8002534 <HAL_Odczyt+0x12c>
			Sum = Sensor_R1 * 2 + Sensor_S2;
 800251a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800251e:	eeb0 7a42 	vmov.f32	s14, s4
 8002522:	eea2 7aa7 	vfma.f32	s14, s5, s15
			Value = Sum / (Sensor_R1 + Sensor_S2);
 8002526:	ee72 2a82 	vadd.f32	s5, s5, s4
			Sum = Sensor_R1 * 2 + Sensor_S2;
 800252a:	eef0 7a47 	vmov.f32	s15, s14
 800252e:	ed83 7a00 	vstr	s14, [r3]
 8002532:	e7d3      	b.n	80024dc <HAL_Odczyt+0xd4>
		else if (Sensor_L2 > 0)
 8002534:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8002538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253c:	dd0c      	ble.n	8002558 <HAL_Odczyt+0x150>
			Sum = Sensor_L2 * (-2) - Sensor_S1;
 800253e:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8002542:	eeb0 7a61 	vmov.f32	s14, s3
 8002546:	ee91 7a27 	vfnms.f32	s14, s2, s15
			Value = Sum / (Sensor_L2 + Sensor_S1);
 800254a:	ee71 0a21 	vadd.f32	s1, s2, s3
			Sum = Sensor_L2 * (-2) - Sensor_S1;
 800254e:	eef0 7a47 	vmov.f32	s15, s14
 8002552:	ed83 7a00 	vstr	s14, [r3]
 8002556:	e7aa      	b.n	80024ae <HAL_Odczyt+0xa6>
			Sum = Sensor_S1 * (-1) + Sensor_S2;
 8002558:	ee72 7a61 	vsub.f32	s15, s4, s3
			Value = Sum / (Sensor_S1 + Sensor_S2);
 800255c:	ee72 2a21 	vadd.f32	s5, s4, s3
			Sum = Sensor_S1 * (-1) + Sensor_S2;
 8002560:	edc3 7a00 	vstr	s15, [r3]
 8002564:	e7ba      	b.n	80024dc <HAL_Odczyt+0xd4>
 8002566:	bf00      	nop
 8002568:	20000068 	.word	0x20000068
 800256c:	20000064 	.word	0x20000064
 8002570:	42c80000 	.word	0x42c80000
 8002574:	20000048 	.word	0x20000048

08002578 <HAL_TIM_PeriodElapsedCallback>:
			SpeedEngine(ActualRight + 500, ActualLeft + 500);
		if (ActualRight >= 50000)	SpeedEngine(max, ActualLeft);
		if (ActualLeft >= 50000)	SpeedEngine(ActualRight, max);
*/
		//I
		if (Integral < IntegralLimit && Integral > (IntegralLimit * (-1)))
 8002578:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	ed92 7a00 	vldr	s14, [r2]
 8002582:	4920      	ldr	r1, [pc, #128]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	{
 800258c:	b510      	push	{r4, lr}
		if (Integral < IntegralLimit && Integral > (IntegralLimit * (-1)))
 800258e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002596:	4610      	mov	r0, r2
 8002598:	dd1c      	ble.n	80025d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800259a:	425c      	negs	r4, r3
 800259c:	ee06 4a90 	vmov	s13, r4
 80025a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025a4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	dd12      	ble.n	80025d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
		Integral = Integral + Error;
 80025ae:	edd1 7a00 	vldr	s15, [r1]
 80025b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80025b6:	ed82 7a00 	vstr	s14, [r2]
		else if (Integral > IntegralLimit)				Integral = IntegralLimit;
		else if (Integral < (IntegralLimit * (-1)))		Integral = IntegralLimit * (-1);

		//D
		Derivative = Error - LastError;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025bc:	ed91 7a00 	vldr	s14, [r1]
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x94>)
		LastError = Error;
 80025c6:	ed83 7a00 	vstr	s14, [r3]
		Derivative = Error - LastError;
 80025ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ce:	edc2 7a00 	vstr	s15, [r2]
		LastError = Error;
 80025d2:	bd10      	pop	{r4, pc}
		else if (Integral > IntegralLimit)				Integral = IntegralLimit;
 80025d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d502      	bpl.n	80025e4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		else if (Integral < (IntegralLimit * (-1)))		Integral = IntegralLimit * (-1);
 80025de:	edc0 7a00 	vstr	s15, [r0]
 80025e2:	e7ea      	b.n	80025ba <HAL_TIM_PeriodElapsedCallback+0x42>
 80025e4:	425b      	negs	r3, r3
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d4f2      	bmi.n	80025de <HAL_TIM_PeriodElapsedCallback+0x66>
 80025f8:	e7df      	b.n	80025ba <HAL_TIM_PeriodElapsedCallback+0x42>
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000054 	.word	0x20000054
 8002604:	20000148 	.word	0x20000148
 8002608:	20000058 	.word	0x20000058
 800260c:	20000050 	.word	0x20000050

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b530      	push	{r4, r5, lr}
 8002612:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002614:	2230      	movs	r2, #48	; 0x30
 8002616:	2100      	movs	r1, #0
 8002618:	a808      	add	r0, sp, #32
 800261a:	f000 fc2d 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800261e:	2100      	movs	r1, #0
 8002620:	2214      	movs	r2, #20
 8002622:	a803      	add	r0, sp, #12
 8002624:	f000 fc28 	bl	8002e78 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2400      	movs	r4, #0
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <SystemClock_Config+0x88>)
 800262c:	9401      	str	r4, [sp, #4]
 800262e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002630:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <SystemClock_Config+0x8c>)
 8002642:	9402      	str	r4, [sp, #8]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002656:	2301      	movs	r3, #1
 8002658:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800265a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002664:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002666:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002668:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 800266c:	2304      	movs	r3, #4
 800266e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002670:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002672:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002674:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002676:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002678:	f7fe fe8e 	bl	8001398 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267c:	230f      	movs	r3, #15
 800267e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002680:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002686:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002688:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800268c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800268e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002690:	f7ff f856 	bl	8001740 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002694:	b015      	add	sp, #84	; 0x54
 8002696:	bd30      	pop	{r4, r5, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	40007000 	.word	0x40007000

080026a0 <main>:
{
 80026a0:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  HAL_Init();
 80026a2:	f7fe f975 	bl	8000990 <HAL_Init>
  SystemClock_Config();
 80026a6:	f7ff ffb3 	bl	8002610 <SystemClock_Config>
  MX_GPIO_Init();
 80026aa:	f7ff fddb 	bl	8002264 <MX_GPIO_Init>
  MX_DMA_Init();
 80026ae:	f7ff fdbf 	bl	8002230 <MX_DMA_Init>
  MX_TIM1_Init();
 80026b2:	f000 f9bf 	bl	8002a34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80026b6:	f000 fa9d 	bl	8002bf4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026ba:	f000 faeb 	bl	8002c94 <MX_TIM3_Init>
  MX_ADC1_Init();
 80026be:	f7ff fcd7 	bl	8002070 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80026c2:	f000 fb37 	bl	8002d34 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80026c6:	f000 f9e7 	bl	8002a98 <MX_TIM10_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)SensorValue, 8);
 80026ca:	2208      	movs	r2, #8
 80026cc:	499e      	ldr	r1, [pc, #632]	; (8002948 <main+0x2a8>)
 80026ce:	489f      	ldr	r0, [pc, #636]	; (800294c <main+0x2ac>)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //R_PWM
 80026d0:	4d9f      	ldr	r5, [pc, #636]	; (8002950 <main+0x2b0>)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //L_PWM
 80026d2:	4ca0      	ldr	r4, [pc, #640]	; (8002954 <main+0x2b4>)
	Error = SetPoint + ActualSensorValue; //uchyb
 80026d4:	4ea0      	ldr	r6, [pc, #640]	; (8002958 <main+0x2b8>)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)SensorValue, 8);
 80026d6:	f7fe fa2d 	bl	8000b34 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(R_SILNIK1_GPIO_Port, R_SILNIK1_Pin, GPIO_PIN_RESET);
 80026da:	2200      	movs	r2, #0
 80026dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e0:	489e      	ldr	r0, [pc, #632]	; (800295c <main+0x2bc>)
 80026e2:	f7fe fe53 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_SILNIK2_GPIO_Port, R_SILNIK2_Pin, GPIO_PIN_SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ec:	489b      	ldr	r0, [pc, #620]	; (800295c <main+0x2bc>)
 80026ee:	f7fe fe4d 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_SILNIK1_GPIO_Port, L_SILNIK1_Pin, GPIO_PIN_SET);
 80026f2:	2201      	movs	r2, #1
 80026f4:	2120      	movs	r1, #32
 80026f6:	489a      	ldr	r0, [pc, #616]	; (8002960 <main+0x2c0>)
 80026f8:	f7fe fe48 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_SILNIK2_GPIO_Port, L_SILNIK2_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2108      	movs	r1, #8
 8002700:	4897      	ldr	r0, [pc, #604]	; (8002960 <main+0x2c0>)
 8002702:	f7fe fe43 	bl	800138c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //R_PWM
 8002706:	2108      	movs	r1, #8
 8002708:	4628      	mov	r0, r5
 800270a:	f7ff fbbd 	bl	8001e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //L_PWM
 800270e:	2100      	movs	r1, #0
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff fbb9 	bl	8001e88 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10000);
 8002716:	682a      	ldr	r2, [r5, #0]
  HAL_TIM_Base_Start_IT(&htim10);
 8002718:	4892      	ldr	r0, [pc, #584]	; (8002964 <main+0x2c4>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10000);
 800271a:	f242 7310 	movw	r3, #10000	; 0x2710
 800271e:	63d3      	str	r3, [r2, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 8002720:	6822      	ldr	r2, [r4, #0]
if (NewSensor[0] > 0 || NewSensor[1] > 0 || NewSensor[2] > 0 || NewSensor[3] > 0 || NewSensor[4] > 0 || NewSensor[5] > 0 || NewSensor[6] > 0 || NewSensor[7] > 0)
 8002722:	4c91      	ldr	r4, [pc, #580]	; (8002968 <main+0x2c8>)
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 8002724:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_TIM_Base_Start_IT(&htim10);
 8002726:	f7ff f93b 	bl	80019a0 <HAL_TIM_Base_Start_IT>
 800272a:	4625      	mov	r5, r4
HAL_Values();
 800272c:	f7ff fe16 	bl	800235c <HAL_Values>
if (NewSensor[0] > 0 || NewSensor[1] > 0 || NewSensor[2] > 0 || NewSensor[3] > 0 || NewSensor[4] > 0 || NewSensor[5] > 0 || NewSensor[6] > 0 || NewSensor[7] > 0)
 8002730:	ed94 0a00 	vldr	s0, [r4]
 8002734:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	dc31      	bgt.n	80027a2 <main+0x102>
 800273e:	edd4 7a01 	vldr	s15, [r4, #4]
 8002742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	dc2a      	bgt.n	80027a2 <main+0x102>
 800274c:	edd4 7a02 	vldr	s15, [r4, #8]
 8002750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002758:	dc23      	bgt.n	80027a2 <main+0x102>
 800275a:	edd4 7a03 	vldr	s15, [r4, #12]
 800275e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	dc1c      	bgt.n	80027a2 <main+0x102>
 8002768:	edd4 7a04 	vldr	s15, [r4, #16]
 800276c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	dc15      	bgt.n	80027a2 <main+0x102>
 8002776:	edd4 7a05 	vldr	s15, [r4, #20]
 800277a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	dc0e      	bgt.n	80027a2 <main+0x102>
 8002784:	edd4 7a06 	vldr	s15, [r4, #24]
 8002788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	dc07      	bgt.n	80027a2 <main+0x102>
 8002792:	edd4 7a07 	vldr	s15, [r4, #28]
 8002796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	f340 80d1 	ble.w	8002944 <main+0x2a4>
	HAL_Odczyt(NewSensor[0], NewSensor[1], NewSensor[2], NewSensor[3], NewSensor[4], NewSensor[5], NewSensor[6], NewSensor[7]);
 80027a2:	edd5 3a07 	vldr	s7, [r5, #28]
 80027a6:	ed95 3a06 	vldr	s6, [r5, #24]
 80027aa:	edd5 2a05 	vldr	s5, [r5, #20]
 80027ae:	ed95 2a04 	vldr	s4, [r5, #16]
 80027b2:	edd5 1a03 	vldr	s3, [r5, #12]
 80027b6:	ed95 1a02 	vldr	s2, [r5, #8]
 80027ba:	edd5 0a01 	vldr	s1, [r5, #4]
 80027be:	f7ff fe23 	bl	8002408 <HAL_Odczyt>
	Error = SetPoint + ActualSensorValue; //uchyb
 80027c2:	edd6 7a00 	vldr	s15, [r6]
 80027c6:	4b69      	ldr	r3, [pc, #420]	; (800296c <main+0x2cc>)
 80027c8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <main+0x2d0>)
 80027d2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80027d6:	ed83 8a00 	vstr	s16, [r3]
	ControlVariable = round(Kp * Error);
 80027da:	4b66      	ldr	r3, [pc, #408]	; (8002974 <main+0x2d4>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80027e8:	ee17 0a90 	vmov	r0, s15
 80027ec:	f7fd fe58 	bl	80004a0 <__aeabi_f2d>
 80027f0:	ec41 0b10 	vmov	d0, r0, r1
 80027f4:	f000 fb48 	bl	8002e88 <round>
	ControlVariable = ControlVariable + round(Ki * Integral);
 80027f8:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <main+0x2d8>)
 80027fa:	ed93 7a00 	vldr	s14, [r3]
 80027fe:	4b5f      	ldr	r3, [pc, #380]	; (800297c <main+0x2dc>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
	ControlVariable = round(Kp * Error);
 8002808:	ec59 8b10 	vmov	r8, r9, d0
	ControlVariable = ControlVariable + round(Ki * Integral);
 800280c:	ee17 0a90 	vmov	r0, s15
 8002810:	f7fd fe46 	bl	80004a0 <__aeabi_f2d>
 8002814:	ec41 0b10 	vmov	d0, r0, r1
 8002818:	f000 fb36 	bl	8002e88 <round>
	ControlVariable = ControlVariable + round(Kd * Derivative);
 800281c:	4958      	ldr	r1, [pc, #352]	; (8002980 <main+0x2e0>)
 800281e:	edd1 7a00 	vldr	s15, [r1]
 8002822:	4958      	ldr	r1, [pc, #352]	; (8002984 <main+0x2e4>)
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	ed91 7a00 	vldr	s14, [r1]
 800282c:	ee67 7a87 	vmul.f32	s15, s15, s14
	ControlVariable = ControlVariable + round(Ki * Integral);
 8002830:	ec53 2b10 	vmov	r2, r3, d0
	ControlVariable = ControlVariable + round(Kd * Derivative);
 8002834:	ee17 0a90 	vmov	r0, s15
	ControlVariable = ControlVariable + round(Ki * Integral);
 8002838:	e9cd 2302 	strd	r2, r3, [sp, #8]
	ControlVariable = ControlVariable + round(Kd * Derivative);
 800283c:	f7fd fe30 	bl	80004a0 <__aeabi_f2d>
 8002840:	ec41 0b10 	vmov	d0, r0, r1
 8002844:	f000 fb20 	bl	8002e88 <round>
	ControlVariable = round(Kp * Error);
 8002848:	4649      	mov	r1, r9
 800284a:	4640      	mov	r0, r8
	ControlVariable = ControlVariable + round(Kd * Derivative);
 800284c:	ed8d 0b00 	vstr	d0, [sp]
	ControlVariable = round(Kp * Error);
 8002850:	f7fd fe7a 	bl	8000548 <__aeabi_d2iz>
	ControlVariable = ControlVariable + round(Ki * Integral);
 8002854:	f7fd fe12 	bl	800047c <__aeabi_i2d>
 8002858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800285c:	f7fd fcc2 	bl	80001e4 <__adddf3>
 8002860:	f7fd fe72 	bl	8000548 <__aeabi_d2iz>
	ControlVariable = ControlVariable + round(Kd * Derivative);
 8002864:	f7fd fe0a 	bl	800047c <__aeabi_i2d>
 8002868:	ed9d 0b00 	vldr	d0, [sp]
 800286c:	ec53 2b10 	vmov	r2, r3, d0
 8002870:	f7fd fcb8 	bl	80001e4 <__adddf3>
 8002874:	f7fd fe68 	bl	8000548 <__aeabi_d2iz>
	if (Error > limit)		SpeedEngine(0, max);
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <main+0x2e8>)
 800287a:	4a44      	ldr	r2, [pc, #272]	; (800298c <main+0x2ec>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	if (ControlVariable < 0)
 8002886:	2800      	cmp	r0, #0
	if (Error > limit)		SpeedEngine(0, max);
 8002888:	eeb4 8ac7 	vcmpe.f32	s16, s14
 			ControlVariable = ControlVariable * (-1);
 800288c:	bfb8      	it	lt
 800288e:	4240      	neglt	r0, r0
	if (Error > limit)		SpeedEngine(0, max);
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 			ControlVariable = ControlVariable * (-1);
 8002894:	6010      	str	r0, [r2, #0]
	if (Error > limit)		SpeedEngine(0, max);
 8002896:	dd05      	ble.n	80028a4 <main+0x204>
 8002898:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <main+0x2f0>)
 800289a:	8819      	ldrh	r1, [r3, #0]
 800289c:	2000      	movs	r0, #0
else	SpeedEngine(0,0);
 800289e:	f7ff fd3f 	bl	8002320 <SpeedEngine>
 80028a2:	e743      	b.n	800272c <main+0x8c>
	else if (Error < (-limit)) SpeedEngine(max,0);
 80028a4:	425b      	negs	r3, r3
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	d503      	bpl.n	80028c0 <main+0x220>
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <main+0x2f0>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	8818      	ldrh	r0, [r3, #0]
 80028be:	e7ee      	b.n	800289e <main+0x1fe>
	else if (Error > 0 && Error < limit) //Prawo
 80028c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80028c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c8:	dd14      	ble.n	80028f4 <main+0x254>
 80028ca:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80028ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d2:	d50f      	bpl.n	80028f4 <main+0x254>
		SpeedEngine(max - ControlVariable, max);
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <main+0x2f0>)
 80028d6:	6810      	ldr	r0, [r2, #0]
 80028d8:	8819      	ldrh	r1, [r3, #0]
 80028da:	1a08      	subs	r0, r1, r0
 80028dc:	f7ff fd20 	bl	8002320 <SpeedEngine>
		if (ActualRight < min) SpeedEngine(min, ActualLeft);
 80028e0:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <main+0x2f4>)
 80028e2:	8818      	ldrh	r0, [r3, #0]
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <main+0x2f8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4298      	cmp	r0, r3
 80028ea:	f77f af1f 	ble.w	800272c <main+0x8c>
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <main+0x2fc>)
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	e7d4      	b.n	800289e <main+0x1fe>
	else if (Error < 0 && Error > (-limit))
 80028f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	4f27      	ldr	r7, [pc, #156]	; (800299c <main+0x2fc>)
 80028fe:	d513      	bpl.n	8002928 <main+0x288>
 8002900:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002908:	dd0e      	ble.n	8002928 <main+0x288>
		SpeedEngine(max, max - ControlVariable);
 800290a:	4b21      	ldr	r3, [pc, #132]	; (8002990 <main+0x2f0>)
 800290c:	6811      	ldr	r1, [r2, #0]
 800290e:	8818      	ldrh	r0, [r3, #0]
 8002910:	1a41      	subs	r1, r0, r1
 8002912:	f7ff fd05 	bl	8002320 <SpeedEngine>
		if (ActualLeft < min) SpeedEngine(ActualRight, min);
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <main+0x2f4>)
 8002918:	8819      	ldrh	r1, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	4299      	cmp	r1, r3
 800291e:	f77f af05 	ble.w	800272c <main+0x8c>
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <main+0x2f8>)
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	e7ba      	b.n	800289e <main+0x1fe>
		ActualRight = ((ActualRight + ActualLeft) / 2) + 5000;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <main+0x2f8>)
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	4411      	add	r1, r2
 8002930:	2202      	movs	r2, #2
 8002932:	fb91 f1f2 	sdiv	r1, r1, r2
 8002936:	f501 519c 	add.w	r1, r1, #4992	; 0x1380
 800293a:	3108      	adds	r1, #8
 800293c:	6019      	str	r1, [r3, #0]
		ActualLeft = ActualRight;
 800293e:	6039      	str	r1, [r7, #0]
else	SpeedEngine(0,0);
 8002940:	4608      	mov	r0, r1
 8002942:	e7ac      	b.n	800289e <main+0x1fe>
 8002944:	2100      	movs	r1, #0
 8002946:	e7fb      	b.n	8002940 <main+0x2a0>
 8002948:	20000114 	.word	0x20000114
 800294c:	2000006c 	.word	0x2000006c
 8002950:	20000214 	.word	0x20000214
 8002954:	20000194 	.word	0x20000194
 8002958:	2000005c 	.word	0x2000005c
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	20000154 	.word	0x20000154
 8002968:	20000128 	.word	0x20000128
 800296c:	20000048 	.word	0x20000048
 8002970:	20000148 	.word	0x20000148
 8002974:	20000014 	.word	0x20000014
 8002978:	20000010 	.word	0x20000010
 800297c:	20000054 	.word	0x20000054
 8002980:	2000000c 	.word	0x2000000c
 8002984:	20000050 	.word	0x20000050
 8002988:	20000018 	.word	0x20000018
 800298c:	2000004c 	.word	0x2000004c
 8002990:	2000001c 	.word	0x2000001c
 8002994:	2000001e 	.word	0x2000001e
 8002998:	20000044 	.word	0x20000044
 800299c:	20000040 	.word	0x20000040

080029a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_MspInit+0x34>)
 80029a8:	2100      	movs	r1, #0
 80029aa:	9100      	str	r1, [sp, #0]
 80029ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
 80029b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	9101      	str	r1, [sp, #4]
 80029c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	b002      	add	sp, #8
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800

080029dc <NMI_Handler>:
 80029dc:	4770      	bx	lr

080029de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029de:	e7fe      	b.n	80029de <HardFault_Handler>

080029e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e0:	e7fe      	b.n	80029e0 <MemManage_Handler>

080029e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	e7fe      	b.n	80029e4 <UsageFault_Handler>

080029e6 <SVC_Handler>:
 80029e6:	4770      	bx	lr

080029e8 <DebugMon_Handler>:
 80029e8:	4770      	bx	lr

080029ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ea:	4770      	bx	lr

080029ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ec:	f7fd bfea 	b.w	80009c4 <HAL_IncTick>

080029f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029f2:	4804      	ldr	r0, [pc, #16]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80029f4:	f7fe ffe9 	bl	80019ca <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 80029fe:	f7fe bfe4 	b.w	80019ca <HAL_TIM_IRQHandler>
 8002a02:	bf00      	nop
 8002a04:	200001d4 	.word	0x200001d4
 8002a08:	20000154 	.word	0x20000154

08002a0c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a0c:	4801      	ldr	r0, [pc, #4]	; (8002a14 <DMA2_Stream0_IRQHandler+0x8>)
 8002a0e:	f7fe bb35 	b.w	800107c <HAL_DMA_IRQHandler>
 8002a12:	bf00      	nop
 8002a14:	200000b4 	.word	0x200000b4

08002a18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SystemInit+0x18>)
 8002a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a36:	2210      	movs	r2, #16
 8002a38:	2100      	movs	r1, #0
 8002a3a:	a802      	add	r0, sp, #8
 8002a3c:	f000 fa1c 	bl	8002e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
 8002a40:	4813      	ldr	r0, [pc, #76]	; (8002a90 <MX_TIM1_Init+0x5c>)
 8002a42:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <MX_TIM1_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a44:	2300      	movs	r3, #0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	9301      	str	r3, [sp, #4]
  htim1.Init.Prescaler = 0;
 8002a4a:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8002a50:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a52:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a54:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a56:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a58:	f7ff f8a8 	bl	8001bac <HAL_TIM_Base_Init>
 8002a5c:	b108      	cbz	r0, 8002a62 <MX_TIM1_Init+0x2e>
  {
    Error_Handler();
 8002a5e:	f7ff ff9f 	bl	80029a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a66:	a902      	add	r1, sp, #8
 8002a68:	4809      	ldr	r0, [pc, #36]	; (8002a90 <MX_TIM1_Init+0x5c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a6c:	f7ff f96a 	bl	8001d44 <HAL_TIM_ConfigClockSource>
 8002a70:	b108      	cbz	r0, 8002a76 <MX_TIM1_Init+0x42>
  {
    Error_Handler();
 8002a72:	f7ff ff95 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a78:	4669      	mov	r1, sp
 8002a7a:	4805      	ldr	r0, [pc, #20]	; (8002a90 <MX_TIM1_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a80:	f7ff fa1e 	bl	8001ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a84:	b108      	cbz	r0, 8002a8a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8002a86:	f7ff ff8b 	bl	80029a0 <Error_Handler>
  }

}
 8002a8a:	b007      	add	sp, #28
 8002a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a90:	200001d4 	.word	0x200001d4
 8002a94:	40010000 	.word	0x40010000

08002a98 <MX_TIM10_Init>:
}
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8002a98:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 99;
 8002a9a:	490b      	ldr	r1, [pc, #44]	; (8002ac8 <MX_TIM10_Init+0x30>)
{
 8002a9c:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 99;
 8002a9e:	2363      	movs	r3, #99	; 0x63
 8002aa0:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 9999;
 8002aa4:	f242 720f 	movw	r2, #9999	; 0x270f
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 9999;
 8002aac:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ab2:	f7ff f87b 	bl	8001bac <HAL_TIM_Base_Init>
 8002ab6:	b118      	cbz	r0, 8002ac0 <MX_TIM10_Init+0x28>
  {
    Error_Handler();
  }

}
 8002ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002abc:	f7ff bf70 	b.w	80029a0 <Error_Handler>
 8002ac0:	bd08      	pop	{r3, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000154 	.word	0x20000154
 8002ac8:	40014400 	.word	0x40014400

08002acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002ace:	6803      	ldr	r3, [r0, #0]
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <HAL_TIM_Base_MspInit+0x98>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_TIM_Base_MspInit+0x9c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ade:	f041 0101 	orr.w	r1, r1, #1
 8002ae2:	6459      	str	r1, [r3, #68]	; 0x44
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002aee:	4611      	mov	r1, r2
 8002af0:	2019      	movs	r0, #25
 8002af2:	f7fe f99d 	bl	8000e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002af6:	2019      	movs	r0, #25
 8002af8:	f7fe f9ce 	bl	8000e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002afc:	e00e      	b.n	8002b1c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM2)
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d10e      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_TIM_Base_MspInit+0x9c>)
 8002b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	9b01      	ldr	r3, [sp, #4]
}
 8002b1c:	b005      	add	sp, #20
 8002b1e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <HAL_TIM_Base_MspInit+0xa0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9302      	str	r3, [sp, #8]
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_TIM_Base_MspInit+0x9c>)
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b30:	f042 0202 	orr.w	r2, r2, #2
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	9b02      	ldr	r3, [sp, #8]
 8002b40:	e7ec      	b.n	8002b1c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM10)
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <HAL_TIM_Base_MspInit+0xa4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d1e9      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_TIM_Base_MspInit+0x9c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	9203      	str	r2, [sp, #12]
 8002b4e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002b50:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002b54:	6459      	str	r1, [r3, #68]	; 0x44
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	9303      	str	r3, [sp, #12]
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	e7c5      	b.n	8002aee <HAL_TIM_Base_MspInit+0x22>
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40014400 	.word	0x40014400

08002b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	4604      	mov	r4, r0
 8002b78:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7a:	2214      	movs	r2, #20
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	a803      	add	r0, sp, #12
 8002b80:	f000 f97a 	bl	8002e78 <memset>
  if(timHandle->Instance==TIM2)
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d118      	bne.n	8002bbe <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_TIM_MspPostInit+0x74>)
 8002b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b94:	f042 0202 	orr.w	r2, r2, #2
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	9b01      	ldr	r3, [sp, #4]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = R_PWM_Pin;
 8002ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bae:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = L_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	a903      	add	r1, sp, #12
 8002bb2:	480e      	ldr	r0, [pc, #56]	; (8002bec <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f7fe fb1b 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bba:	b008      	add	sp, #32
 8002bbc:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <HAL_TIM_MspPostInit+0x7c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d1fa      	bne.n	8002bba <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_TIM_MspPostInit+0x74>)
 8002bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bcc:	f042 0202 	orr.w	r2, r2, #2
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	9302      	str	r3, [sp, #8]
 8002bda:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = L_PWM_Pin;
 8002bdc:	2310      	movs	r3, #16
 8002bde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	9304      	str	r3, [sp, #16]
 8002be4:	e7e4      	b.n	8002bb0 <HAL_TIM_MspPostInit+0x3c>
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40000400 	.word	0x40000400

08002bf4 <MX_TIM2_Init>:
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	a803      	add	r0, sp, #12
 8002bfe:	f000 f93b 	bl	8002e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c02:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c04:	221c      	movs	r2, #28
 8002c06:	eb0d 0002 	add.w	r0, sp, r2
 8002c0a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	9401      	str	r4, [sp, #4]
 8002c0e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c10:	f000 f932 	bl	8002e78 <memset>
  htim2.Instance = TIM2;
 8002c14:	481e      	ldr	r0, [pc, #120]	; (8002c90 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 4;
 8002c16:	2304      	movs	r3, #4
 8002c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c1c:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 49999;
 8002c20:	f24c 334f 	movw	r3, #49999	; 0xc34f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c24:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 49999;
 8002c26:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c28:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c2c:	f7fe ffbe 	bl	8001bac <HAL_TIM_Base_Init>
 8002c30:	b108      	cbz	r0, 8002c36 <MX_TIM2_Init+0x42>
    Error_Handler();
 8002c32:	f7ff feb5 	bl	80029a0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c3a:	a903      	add	r1, sp, #12
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c40:	f7ff f880 	bl	8001d44 <HAL_TIM_ConfigClockSource>
 8002c44:	b108      	cbz	r0, 8002c4a <MX_TIM2_Init+0x56>
    Error_Handler();
 8002c46:	f7ff feab 	bl	80029a0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c4a:	4811      	ldr	r0, [pc, #68]	; (8002c90 <MX_TIM2_Init+0x9c>)
 8002c4c:	f7fe ffc8 	bl	8001be0 <HAL_TIM_PWM_Init>
 8002c50:	b108      	cbz	r0, 8002c56 <MX_TIM2_Init+0x62>
    Error_Handler();
 8002c52:	f7ff fea5 	bl	80029a0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c56:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c58:	a901      	add	r1, sp, #4
 8002c5a:	480d      	ldr	r0, [pc, #52]	; (8002c90 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c60:	f7ff f92e 	bl	8001ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c64:	b108      	cbz	r0, 8002c6a <MX_TIM2_Init+0x76>
    Error_Handler();
 8002c66:	f7ff fe9b 	bl	80029a0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	a907      	add	r1, sp, #28
 8002c70:	4807      	ldr	r0, [pc, #28]	; (8002c90 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c72:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002c74:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c76:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c78:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c7a:	f7fe fff7 	bl	8001c6c <HAL_TIM_PWM_ConfigChannel>
 8002c7e:	b108      	cbz	r0, 8002c84 <MX_TIM2_Init+0x90>
    Error_Handler();
 8002c80:	f7ff fe8e 	bl	80029a0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <MX_TIM2_Init+0x9c>)
 8002c86:	f7ff ff75 	bl	8002b74 <HAL_TIM_MspPostInit>
}
 8002c8a:	b00e      	add	sp, #56	; 0x38
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000214 	.word	0x20000214

08002c94 <MX_TIM3_Init>:
{
 8002c94:	b510      	push	{r4, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c98:	2210      	movs	r2, #16
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	a803      	add	r0, sp, #12
 8002c9e:	f000 f8eb 	bl	8002e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca4:	221c      	movs	r2, #28
 8002ca6:	eb0d 0002 	add.w	r0, sp, r2
 8002caa:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	9401      	str	r4, [sp, #4]
 8002cae:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb0:	f000 f8e2 	bl	8002e78 <memset>
  htim3.Instance = TIM3;
 8002cb4:	481d      	ldr	r0, [pc, #116]	; (8002d2c <MX_TIM3_Init+0x98>)
  htim3.Init.Prescaler = 4;
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 4;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 49999;
 8002cc0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8002cc4:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc6:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cca:	f7fe ff6f 	bl	8001bac <HAL_TIM_Base_Init>
 8002cce:	b108      	cbz	r0, 8002cd4 <MX_TIM3_Init+0x40>
    Error_Handler();
 8002cd0:	f7ff fe66 	bl	80029a0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cd8:	a903      	add	r1, sp, #12
 8002cda:	4814      	ldr	r0, [pc, #80]	; (8002d2c <MX_TIM3_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cdc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cde:	f7ff f831 	bl	8001d44 <HAL_TIM_ConfigClockSource>
 8002ce2:	b108      	cbz	r0, 8002ce8 <MX_TIM3_Init+0x54>
    Error_Handler();
 8002ce4:	f7ff fe5c 	bl	80029a0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ce8:	4810      	ldr	r0, [pc, #64]	; (8002d2c <MX_TIM3_Init+0x98>)
 8002cea:	f7fe ff79 	bl	8001be0 <HAL_TIM_PWM_Init>
 8002cee:	b108      	cbz	r0, 8002cf4 <MX_TIM3_Init+0x60>
    Error_Handler();
 8002cf0:	f7ff fe56 	bl	80029a0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf4:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cf6:	a901      	add	r1, sp, #4
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MX_TIM3_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfa:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfc:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cfe:	f7ff f8df 	bl	8001ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d02:	b108      	cbz	r0, 8002d08 <MX_TIM3_Init+0x74>
    Error_Handler();
 8002d04:	f7ff fe4c 	bl	80029a0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d08:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	a907      	add	r1, sp, #28
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <MX_TIM3_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d10:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002d12:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d14:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d16:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d18:	f7fe ffa8 	bl	8001c6c <HAL_TIM_PWM_ConfigChannel>
 8002d1c:	b108      	cbz	r0, 8002d22 <MX_TIM3_Init+0x8e>
    Error_Handler();
 8002d1e:	f7ff fe3f 	bl	80029a0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002d22:	4802      	ldr	r0, [pc, #8]	; (8002d2c <MX_TIM3_Init+0x98>)
 8002d24:	f7ff ff26 	bl	8002b74 <HAL_TIM_MspPostInit>
}
 8002d28:	b00e      	add	sp, #56	; 0x38
 8002d2a:	bd10      	pop	{r4, pc}
 8002d2c:	20000194 	.word	0x20000194
 8002d30:	40000400 	.word	0x40000400

08002d34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d34:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002d36:	480b      	ldr	r0, [pc, #44]	; (8002d64 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <MX_USART2_UART_Init+0x34>)
 8002d3a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002d3e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d42:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d44:	2300      	movs	r3, #0
 8002d46:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d48:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d4c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d52:	f7ff f95f 	bl	8002014 <HAL_UART_Init>
 8002d56:	b118      	cbz	r0, 8002d60 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d5c:	f7ff be20 	b.w	80029a0 <Error_Handler>
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	20000254 	.word	0x20000254
 8002d68:	40004400 	.word	0x40004400

08002d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	4604      	mov	r4, r0
 8002d70:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d72:	2214      	movs	r2, #20
 8002d74:	2100      	movs	r1, #0
 8002d76:	a803      	add	r0, sp, #12
 8002d78:	f000 f87e 	bl	8002e78 <memset>
  if(uartHandle->Instance==USART2)
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_UART_MspInit+0x68>)
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d124      	bne.n	8002dce <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d84:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d88:	2100      	movs	r1, #0
 8002d8a:	9101      	str	r1, [sp, #4]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	4812      	ldr	r0, [pc, #72]	; (8002dd8 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
 8002d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d98:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002d9c:	9201      	str	r2, [sp, #4]
 8002d9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da0:	9102      	str	r1, [sp, #8]
 8002da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002db4:	230c      	movs	r3, #12
 8002db6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f7fe fa11 	bl	80011f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dce:	b008      	add	sp, #32
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40020000 	.word	0x40020000

08002ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002de0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002de2:	e003      	b.n	8002dec <LoopCopyDataInit>

08002de4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002de6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002de8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dea:	3104      	adds	r1, #4

08002dec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dec:	480b      	ldr	r0, [pc, #44]	; (8002e1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002df0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002df2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002df4:	d3f6      	bcc.n	8002de4 <CopyDataInit>
  ldr  r2, =_sbss
 8002df6:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002df8:	e002      	b.n	8002e00 <LoopFillZerobss>

08002dfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dfc:	f842 3b04 	str.w	r3, [r2], #4

08002e00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e04:	d3f9      	bcc.n	8002dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e06:	f7ff fe07 	bl	8002a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e0a:	f000 f811 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e0e:	f7ff fc47 	bl	80026a0 <main>
  bx  lr    
 8002e12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e18:	08002f5c 	.word	0x08002f5c
  ldr  r0, =_sdata
 8002e1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e20:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8002e24:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8002e28:	20000294 	.word	0x20000294

08002e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e2c:	e7fe      	b.n	8002e2c <ADC_IRQHandler>
	...

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4e0d      	ldr	r6, [pc, #52]	; (8002e68 <__libc_init_array+0x38>)
 8002e34:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e36:	1ba4      	subs	r4, r4, r6
 8002e38:	10a4      	asrs	r4, r4, #2
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	42a5      	cmp	r5, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	4e0b      	ldr	r6, [pc, #44]	; (8002e70 <__libc_init_array+0x40>)
 8002e42:	4c0c      	ldr	r4, [pc, #48]	; (8002e74 <__libc_init_array+0x44>)
 8002e44:	f000 f866 	bl	8002f14 <_init>
 8002e48:	1ba4      	subs	r4, r4, r6
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	42a5      	cmp	r5, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e58:	4798      	blx	r3
 8002e5a:	3501      	adds	r5, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e62:	4798      	blx	r3
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002f54 	.word	0x08002f54
 8002e6c:	08002f54 	.word	0x08002f54
 8002e70:	08002f54 	.word	0x08002f54
 8002e74:	08002f58 	.word	0x08002f58

08002e78 <memset>:
 8002e78:	4402      	add	r2, r0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <round>:
 8002e88:	ec51 0b10 	vmov	r0, r1, d0
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8002e92:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8002e96:	2c13      	cmp	r4, #19
 8002e98:	460b      	mov	r3, r1
 8002e9a:	460f      	mov	r7, r1
 8002e9c:	dc17      	bgt.n	8002ece <round+0x46>
 8002e9e:	2c00      	cmp	r4, #0
 8002ea0:	da09      	bge.n	8002eb6 <round+0x2e>
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8002ea8:	d103      	bne.n	8002eb2 <round+0x2a>
 8002eaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002eae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	e028      	b.n	8002f08 <round+0x80>
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <round+0x88>)
 8002eb8:	4122      	asrs	r2, r4
 8002eba:	4211      	tst	r1, r2
 8002ebc:	d100      	bne.n	8002ec0 <round+0x38>
 8002ebe:	b180      	cbz	r0, 8002ee2 <round+0x5a>
 8002ec0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ec4:	4123      	asrs	r3, r4
 8002ec6:	443b      	add	r3, r7
 8002ec8:	ea23 0302 	bic.w	r3, r3, r2
 8002ecc:	e7f1      	b.n	8002eb2 <round+0x2a>
 8002ece:	2c33      	cmp	r4, #51	; 0x33
 8002ed0:	dd0a      	ble.n	8002ee8 <round+0x60>
 8002ed2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002ed6:	d104      	bne.n	8002ee2 <round+0x5a>
 8002ed8:	ee10 2a10 	vmov	r2, s0
 8002edc:	460b      	mov	r3, r1
 8002ede:	f7fd f981 	bl	80001e4 <__adddf3>
 8002ee2:	ec41 0b10 	vmov	d0, r0, r1
 8002ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ee8:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 8002eec:	f04f 35ff 	mov.w	r5, #4294967295
 8002ef0:	40d5      	lsrs	r5, r2
 8002ef2:	4228      	tst	r0, r5
 8002ef4:	d0f5      	beq.n	8002ee2 <round+0x5a>
 8002ef6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8002efa:	2201      	movs	r2, #1
 8002efc:	40a2      	lsls	r2, r4
 8002efe:	1812      	adds	r2, r2, r0
 8002f00:	bf28      	it	cs
 8002f02:	3301      	addcs	r3, #1
 8002f04:	ea22 0105 	bic.w	r1, r2, r5
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	e7e9      	b.n	8002ee2 <round+0x5a>
 8002f0e:	bf00      	nop
 8002f10:	000fffff 	.word	0x000fffff

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
